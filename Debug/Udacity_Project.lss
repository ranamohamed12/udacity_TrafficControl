
Udacity_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fbc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00800060  00001fbc  00002050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080016a  0080016a  0000215a  2**0
                  ALLOC
  3 .stab         00001ed8  00000000  00000000  0000215c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000acf  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00004b03  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b4  00000000  00000000  00004c63  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0e  00000000  00000000  00004e17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010c3  00000000  00000000  00006d25  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001032  00000000  00000000  00007de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00008e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e3  00000000  00000000  00008f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000956  00000000  00000000  0000927f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009bd5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 eb 0e 	jmp	0x1dd6	; 0x1dd6 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec eb       	ldi	r30, 0xBC	; 188
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 36       	cpi	r26, 0x6B	; 107
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <main>
      8a:	0c 94 dc 0f 	jmp	0x1fb8	; 0x1fb8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 45 0f 	jmp	0x1e8a	; 0x1e8a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 35 0f 	jmp	0x1e6a	; 0x1e6a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 51 0f 	jmp	0x1ea2	; 0x1ea2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 35 0f 	jmp	0x1e6a	; 0x1e6a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 51 0f 	jmp	0x1ea2	; 0x1ea2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 45 0f 	jmp	0x1e8a	; 0x1e8a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 31 0f 	jmp	0x1e62	; 0x1e62 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 4d 0f 	jmp	0x1e9a	; 0x1e9a <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 35 0f 	jmp	0x1e6a	; 0x1e6a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 43 06 	call	0xc86	; 0xc86 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 51 0f 	jmp	0x1ea2	; 0x1ea2 <__epilogue_restores__+0x18>

000007ea <__floatsisf>:
     7ea:	a8 e0       	ldi	r26, 0x08	; 8
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 32 0f 	jmp	0x1e64	; 0x1e64 <__prologue_saves__+0x12>
     7f6:	9b 01       	movw	r18, r22
     7f8:	ac 01       	movw	r20, r24
     7fa:	83 e0       	ldi	r24, 0x03	; 3
     7fc:	89 83       	std	Y+1, r24	; 0x01
     7fe:	da 01       	movw	r26, r20
     800:	c9 01       	movw	r24, r18
     802:	88 27       	eor	r24, r24
     804:	b7 fd       	sbrc	r27, 7
     806:	83 95       	inc	r24
     808:	99 27       	eor	r25, r25
     80a:	aa 27       	eor	r26, r26
     80c:	bb 27       	eor	r27, r27
     80e:	b8 2e       	mov	r11, r24
     810:	21 15       	cp	r18, r1
     812:	31 05       	cpc	r19, r1
     814:	41 05       	cpc	r20, r1
     816:	51 05       	cpc	r21, r1
     818:	19 f4       	brne	.+6      	; 0x820 <__floatsisf+0x36>
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	3a c0       	rjmp	.+116    	; 0x894 <__stack+0x35>
     820:	88 23       	and	r24, r24
     822:	a9 f0       	breq	.+42     	; 0x84e <__floatsisf+0x64>
     824:	20 30       	cpi	r18, 0x00	; 0
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	38 07       	cpc	r19, r24
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	48 07       	cpc	r20, r24
     82e:	80 e8       	ldi	r24, 0x80	; 128
     830:	58 07       	cpc	r21, r24
     832:	29 f4       	brne	.+10     	; 0x83e <__floatsisf+0x54>
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	9f ec       	ldi	r25, 0xCF	; 207
     83c:	30 c0       	rjmp	.+96     	; 0x89e <__stack+0x3f>
     83e:	ee 24       	eor	r14, r14
     840:	ff 24       	eor	r15, r15
     842:	87 01       	movw	r16, r14
     844:	e2 1a       	sub	r14, r18
     846:	f3 0a       	sbc	r15, r19
     848:	04 0b       	sbc	r16, r20
     84a:	15 0b       	sbc	r17, r21
     84c:	02 c0       	rjmp	.+4      	; 0x852 <__floatsisf+0x68>
     84e:	79 01       	movw	r14, r18
     850:	8a 01       	movw	r16, r20
     852:	8e e1       	ldi	r24, 0x1E	; 30
     854:	c8 2e       	mov	r12, r24
     856:	d1 2c       	mov	r13, r1
     858:	dc 82       	std	Y+4, r13	; 0x04
     85a:	cb 82       	std	Y+3, r12	; 0x03
     85c:	ed 82       	std	Y+5, r14	; 0x05
     85e:	fe 82       	std	Y+6, r15	; 0x06
     860:	0f 83       	std	Y+7, r16	; 0x07
     862:	18 87       	std	Y+8, r17	; 0x08
     864:	c8 01       	movw	r24, r16
     866:	b7 01       	movw	r22, r14
     868:	0e 94 a7 04 	call	0x94e	; 0x94e <__clzsi2>
     86c:	01 97       	sbiw	r24, 0x01	; 1
     86e:	18 16       	cp	r1, r24
     870:	19 06       	cpc	r1, r25
     872:	84 f4       	brge	.+32     	; 0x894 <__stack+0x35>
     874:	08 2e       	mov	r0, r24
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	ee 0c       	add	r14, r14
     87a:	ff 1c       	adc	r15, r15
     87c:	00 1f       	adc	r16, r16
     87e:	11 1f       	adc	r17, r17
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	ed 82       	std	Y+5, r14	; 0x05
     886:	fe 82       	std	Y+6, r15	; 0x06
     888:	0f 83       	std	Y+7, r16	; 0x07
     88a:	18 87       	std	Y+8, r17	; 0x08
     88c:	c8 1a       	sub	r12, r24
     88e:	d9 0a       	sbc	r13, r25
     890:	dc 82       	std	Y+4, r13	; 0x04
     892:	cb 82       	std	Y+3, r12	; 0x03
     894:	ba 82       	std	Y+2, r11	; 0x02
     896:	ce 01       	movw	r24, r28
     898:	01 96       	adiw	r24, 0x01	; 1
     89a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__pack_f>
     89e:	28 96       	adiw	r28, 0x08	; 8
     8a0:	e9 e0       	ldi	r30, 0x09	; 9
     8a2:	0c 94 4e 0f 	jmp	0x1e9c	; 0x1e9c <__epilogue_restores__+0x12>

000008a6 <__fixsfsi>:
     8a6:	ac e0       	ldi	r26, 0x0C	; 12
     8a8:	b0 e0       	ldi	r27, 0x00	; 0
     8aa:	e9 e5       	ldi	r30, 0x59	; 89
     8ac:	f4 e0       	ldi	r31, 0x04	; 4
     8ae:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__prologue_saves__+0x20>
     8b2:	69 83       	std	Y+1, r22	; 0x01
     8b4:	7a 83       	std	Y+2, r23	; 0x02
     8b6:	8b 83       	std	Y+3, r24	; 0x03
     8b8:	9c 83       	std	Y+4, r25	; 0x04
     8ba:	ce 01       	movw	r24, r28
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	be 01       	movw	r22, r28
     8c0:	6b 5f       	subi	r22, 0xFB	; 251
     8c2:	7f 4f       	sbci	r23, 0xFF	; 255
     8c4:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     8c8:	8d 81       	ldd	r24, Y+5	; 0x05
     8ca:	82 30       	cpi	r24, 0x02	; 2
     8cc:	61 f1       	breq	.+88     	; 0x926 <__fixsfsi+0x80>
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	50 f1       	brcs	.+84     	; 0x926 <__fixsfsi+0x80>
     8d2:	84 30       	cpi	r24, 0x04	; 4
     8d4:	21 f4       	brne	.+8      	; 0x8de <__fixsfsi+0x38>
     8d6:	8e 81       	ldd	r24, Y+6	; 0x06
     8d8:	88 23       	and	r24, r24
     8da:	51 f1       	breq	.+84     	; 0x930 <__fixsfsi+0x8a>
     8dc:	2e c0       	rjmp	.+92     	; 0x93a <__fixsfsi+0x94>
     8de:	2f 81       	ldd	r18, Y+7	; 0x07
     8e0:	38 85       	ldd	r19, Y+8	; 0x08
     8e2:	37 fd       	sbrc	r19, 7
     8e4:	20 c0       	rjmp	.+64     	; 0x926 <__fixsfsi+0x80>
     8e6:	6e 81       	ldd	r22, Y+6	; 0x06
     8e8:	2f 31       	cpi	r18, 0x1F	; 31
     8ea:	31 05       	cpc	r19, r1
     8ec:	1c f0       	brlt	.+6      	; 0x8f4 <__fixsfsi+0x4e>
     8ee:	66 23       	and	r22, r22
     8f0:	f9 f0       	breq	.+62     	; 0x930 <__fixsfsi+0x8a>
     8f2:	23 c0       	rjmp	.+70     	; 0x93a <__fixsfsi+0x94>
     8f4:	8e e1       	ldi	r24, 0x1E	; 30
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	82 1b       	sub	r24, r18
     8fa:	93 0b       	sbc	r25, r19
     8fc:	29 85       	ldd	r18, Y+9	; 0x09
     8fe:	3a 85       	ldd	r19, Y+10	; 0x0a
     900:	4b 85       	ldd	r20, Y+11	; 0x0b
     902:	5c 85       	ldd	r21, Y+12	; 0x0c
     904:	04 c0       	rjmp	.+8      	; 0x90e <__fixsfsi+0x68>
     906:	56 95       	lsr	r21
     908:	47 95       	ror	r20
     90a:	37 95       	ror	r19
     90c:	27 95       	ror	r18
     90e:	8a 95       	dec	r24
     910:	d2 f7       	brpl	.-12     	; 0x906 <__fixsfsi+0x60>
     912:	66 23       	and	r22, r22
     914:	b1 f0       	breq	.+44     	; 0x942 <__fixsfsi+0x9c>
     916:	50 95       	com	r21
     918:	40 95       	com	r20
     91a:	30 95       	com	r19
     91c:	21 95       	neg	r18
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	4f 4f       	sbci	r20, 0xFF	; 255
     922:	5f 4f       	sbci	r21, 0xFF	; 255
     924:	0e c0       	rjmp	.+28     	; 0x942 <__fixsfsi+0x9c>
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	40 e0       	ldi	r20, 0x00	; 0
     92c:	50 e0       	ldi	r21, 0x00	; 0
     92e:	09 c0       	rjmp	.+18     	; 0x942 <__fixsfsi+0x9c>
     930:	2f ef       	ldi	r18, 0xFF	; 255
     932:	3f ef       	ldi	r19, 0xFF	; 255
     934:	4f ef       	ldi	r20, 0xFF	; 255
     936:	5f e7       	ldi	r21, 0x7F	; 127
     938:	04 c0       	rjmp	.+8      	; 0x942 <__fixsfsi+0x9c>
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	50 e8       	ldi	r21, 0x80	; 128
     942:	b9 01       	movw	r22, r18
     944:	ca 01       	movw	r24, r20
     946:	2c 96       	adiw	r28, 0x0c	; 12
     948:	e2 e0       	ldi	r30, 0x02	; 2
     94a:	0c 94 55 0f 	jmp	0x1eaa	; 0x1eaa <__epilogue_restores__+0x20>

0000094e <__clzsi2>:
     94e:	ef 92       	push	r14
     950:	ff 92       	push	r15
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	7b 01       	movw	r14, r22
     958:	8c 01       	movw	r16, r24
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	e8 16       	cp	r14, r24
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	f8 06       	cpc	r15, r24
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	08 07       	cpc	r16, r24
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	18 07       	cpc	r17, r24
     96a:	88 f4       	brcc	.+34     	; 0x98e <__clzsi2+0x40>
     96c:	8f ef       	ldi	r24, 0xFF	; 255
     96e:	e8 16       	cp	r14, r24
     970:	f1 04       	cpc	r15, r1
     972:	01 05       	cpc	r16, r1
     974:	11 05       	cpc	r17, r1
     976:	31 f0       	breq	.+12     	; 0x984 <__clzsi2+0x36>
     978:	28 f0       	brcs	.+10     	; 0x984 <__clzsi2+0x36>
     97a:	88 e0       	ldi	r24, 0x08	; 8
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	a0 e0       	ldi	r26, 0x00	; 0
     980:	b0 e0       	ldi	r27, 0x00	; 0
     982:	17 c0       	rjmp	.+46     	; 0x9b2 <__clzsi2+0x64>
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	a0 e0       	ldi	r26, 0x00	; 0
     98a:	b0 e0       	ldi	r27, 0x00	; 0
     98c:	12 c0       	rjmp	.+36     	; 0x9b2 <__clzsi2+0x64>
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	e8 16       	cp	r14, r24
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	f8 06       	cpc	r15, r24
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	08 07       	cpc	r16, r24
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	18 07       	cpc	r17, r24
     99e:	28 f0       	brcs	.+10     	; 0x9aa <__clzsi2+0x5c>
     9a0:	88 e1       	ldi	r24, 0x18	; 24
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	a0 e0       	ldi	r26, 0x00	; 0
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	04 c0       	rjmp	.+8      	; 0x9b2 <__clzsi2+0x64>
     9aa:	80 e1       	ldi	r24, 0x10	; 16
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	a0 e0       	ldi	r26, 0x00	; 0
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	20 e2       	ldi	r18, 0x20	; 32
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	40 e0       	ldi	r20, 0x00	; 0
     9b8:	50 e0       	ldi	r21, 0x00	; 0
     9ba:	28 1b       	sub	r18, r24
     9bc:	39 0b       	sbc	r19, r25
     9be:	4a 0b       	sbc	r20, r26
     9c0:	5b 0b       	sbc	r21, r27
     9c2:	04 c0       	rjmp	.+8      	; 0x9cc <__clzsi2+0x7e>
     9c4:	16 95       	lsr	r17
     9c6:	07 95       	ror	r16
     9c8:	f7 94       	ror	r15
     9ca:	e7 94       	ror	r14
     9cc:	8a 95       	dec	r24
     9ce:	d2 f7       	brpl	.-12     	; 0x9c4 <__clzsi2+0x76>
     9d0:	f7 01       	movw	r30, r14
     9d2:	e8 59       	subi	r30, 0x98	; 152
     9d4:	ff 4f       	sbci	r31, 0xFF	; 255
     9d6:	80 81       	ld	r24, Z
     9d8:	28 1b       	sub	r18, r24
     9da:	31 09       	sbc	r19, r1
     9dc:	41 09       	sbc	r20, r1
     9de:	51 09       	sbc	r21, r1
     9e0:	c9 01       	movw	r24, r18
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	ff 90       	pop	r15
     9e8:	ef 90       	pop	r14
     9ea:	08 95       	ret

000009ec <__pack_f>:
     9ec:	df 92       	push	r13
     9ee:	ef 92       	push	r14
     9f0:	ff 92       	push	r15
     9f2:	0f 93       	push	r16
     9f4:	1f 93       	push	r17
     9f6:	fc 01       	movw	r30, r24
     9f8:	e4 80       	ldd	r14, Z+4	; 0x04
     9fa:	f5 80       	ldd	r15, Z+5	; 0x05
     9fc:	06 81       	ldd	r16, Z+6	; 0x06
     9fe:	17 81       	ldd	r17, Z+7	; 0x07
     a00:	d1 80       	ldd	r13, Z+1	; 0x01
     a02:	80 81       	ld	r24, Z
     a04:	82 30       	cpi	r24, 0x02	; 2
     a06:	48 f4       	brcc	.+18     	; 0xa1a <__pack_f+0x2e>
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e1       	ldi	r26, 0x10	; 16
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	e8 2a       	or	r14, r24
     a12:	f9 2a       	or	r15, r25
     a14:	0a 2b       	or	r16, r26
     a16:	1b 2b       	or	r17, r27
     a18:	a5 c0       	rjmp	.+330    	; 0xb64 <__pack_f+0x178>
     a1a:	84 30       	cpi	r24, 0x04	; 4
     a1c:	09 f4       	brne	.+2      	; 0xa20 <__pack_f+0x34>
     a1e:	9f c0       	rjmp	.+318    	; 0xb5e <__pack_f+0x172>
     a20:	82 30       	cpi	r24, 0x02	; 2
     a22:	21 f4       	brne	.+8      	; 0xa2c <__pack_f+0x40>
     a24:	ee 24       	eor	r14, r14
     a26:	ff 24       	eor	r15, r15
     a28:	87 01       	movw	r16, r14
     a2a:	05 c0       	rjmp	.+10     	; 0xa36 <__pack_f+0x4a>
     a2c:	e1 14       	cp	r14, r1
     a2e:	f1 04       	cpc	r15, r1
     a30:	01 05       	cpc	r16, r1
     a32:	11 05       	cpc	r17, r1
     a34:	19 f4       	brne	.+6      	; 0xa3c <__pack_f+0x50>
     a36:	e0 e0       	ldi	r30, 0x00	; 0
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	96 c0       	rjmp	.+300    	; 0xb68 <__pack_f+0x17c>
     a3c:	62 81       	ldd	r22, Z+2	; 0x02
     a3e:	73 81       	ldd	r23, Z+3	; 0x03
     a40:	9f ef       	ldi	r25, 0xFF	; 255
     a42:	62 38       	cpi	r22, 0x82	; 130
     a44:	79 07       	cpc	r23, r25
     a46:	0c f0       	brlt	.+2      	; 0xa4a <__pack_f+0x5e>
     a48:	5b c0       	rjmp	.+182    	; 0xb00 <__pack_f+0x114>
     a4a:	22 e8       	ldi	r18, 0x82	; 130
     a4c:	3f ef       	ldi	r19, 0xFF	; 255
     a4e:	26 1b       	sub	r18, r22
     a50:	37 0b       	sbc	r19, r23
     a52:	2a 31       	cpi	r18, 0x1A	; 26
     a54:	31 05       	cpc	r19, r1
     a56:	2c f0       	brlt	.+10     	; 0xa62 <__pack_f+0x76>
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	40 e0       	ldi	r20, 0x00	; 0
     a5e:	50 e0       	ldi	r21, 0x00	; 0
     a60:	2a c0       	rjmp	.+84     	; 0xab6 <__pack_f+0xca>
     a62:	b8 01       	movw	r22, r16
     a64:	a7 01       	movw	r20, r14
     a66:	02 2e       	mov	r0, r18
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__pack_f+0x86>
     a6a:	76 95       	lsr	r23
     a6c:	67 95       	ror	r22
     a6e:	57 95       	ror	r21
     a70:	47 95       	ror	r20
     a72:	0a 94       	dec	r0
     a74:	d2 f7       	brpl	.-12     	; 0xa6a <__pack_f+0x7e>
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	04 c0       	rjmp	.+8      	; 0xa88 <__pack_f+0x9c>
     a80:	88 0f       	add	r24, r24
     a82:	99 1f       	adc	r25, r25
     a84:	aa 1f       	adc	r26, r26
     a86:	bb 1f       	adc	r27, r27
     a88:	2a 95       	dec	r18
     a8a:	d2 f7       	brpl	.-12     	; 0xa80 <__pack_f+0x94>
     a8c:	01 97       	sbiw	r24, 0x01	; 1
     a8e:	a1 09       	sbc	r26, r1
     a90:	b1 09       	sbc	r27, r1
     a92:	8e 21       	and	r24, r14
     a94:	9f 21       	and	r25, r15
     a96:	a0 23       	and	r26, r16
     a98:	b1 23       	and	r27, r17
     a9a:	00 97       	sbiw	r24, 0x00	; 0
     a9c:	a1 05       	cpc	r26, r1
     a9e:	b1 05       	cpc	r27, r1
     aa0:	21 f0       	breq	.+8      	; 0xaaa <__pack_f+0xbe>
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	a0 e0       	ldi	r26, 0x00	; 0
     aa8:	b0 e0       	ldi	r27, 0x00	; 0
     aaa:	9a 01       	movw	r18, r20
     aac:	ab 01       	movw	r20, r22
     aae:	28 2b       	or	r18, r24
     ab0:	39 2b       	or	r19, r25
     ab2:	4a 2b       	or	r20, r26
     ab4:	5b 2b       	or	r21, r27
     ab6:	da 01       	movw	r26, r20
     ab8:	c9 01       	movw	r24, r18
     aba:	8f 77       	andi	r24, 0x7F	; 127
     abc:	90 70       	andi	r25, 0x00	; 0
     abe:	a0 70       	andi	r26, 0x00	; 0
     ac0:	b0 70       	andi	r27, 0x00	; 0
     ac2:	80 34       	cpi	r24, 0x40	; 64
     ac4:	91 05       	cpc	r25, r1
     ac6:	a1 05       	cpc	r26, r1
     ac8:	b1 05       	cpc	r27, r1
     aca:	39 f4       	brne	.+14     	; 0xada <__pack_f+0xee>
     acc:	27 ff       	sbrs	r18, 7
     ace:	09 c0       	rjmp	.+18     	; 0xae2 <__pack_f+0xf6>
     ad0:	20 5c       	subi	r18, 0xC0	; 192
     ad2:	3f 4f       	sbci	r19, 0xFF	; 255
     ad4:	4f 4f       	sbci	r20, 0xFF	; 255
     ad6:	5f 4f       	sbci	r21, 0xFF	; 255
     ad8:	04 c0       	rjmp	.+8      	; 0xae2 <__pack_f+0xf6>
     ada:	21 5c       	subi	r18, 0xC1	; 193
     adc:	3f 4f       	sbci	r19, 0xFF	; 255
     ade:	4f 4f       	sbci	r20, 0xFF	; 255
     ae0:	5f 4f       	sbci	r21, 0xFF	; 255
     ae2:	e0 e0       	ldi	r30, 0x00	; 0
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	20 30       	cpi	r18, 0x00	; 0
     ae8:	a0 e0       	ldi	r26, 0x00	; 0
     aea:	3a 07       	cpc	r19, r26
     aec:	a0 e0       	ldi	r26, 0x00	; 0
     aee:	4a 07       	cpc	r20, r26
     af0:	a0 e4       	ldi	r26, 0x40	; 64
     af2:	5a 07       	cpc	r21, r26
     af4:	10 f0       	brcs	.+4      	; 0xafa <__pack_f+0x10e>
     af6:	e1 e0       	ldi	r30, 0x01	; 1
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	79 01       	movw	r14, r18
     afc:	8a 01       	movw	r16, r20
     afe:	27 c0       	rjmp	.+78     	; 0xb4e <__pack_f+0x162>
     b00:	60 38       	cpi	r22, 0x80	; 128
     b02:	71 05       	cpc	r23, r1
     b04:	64 f5       	brge	.+88     	; 0xb5e <__pack_f+0x172>
     b06:	fb 01       	movw	r30, r22
     b08:	e1 58       	subi	r30, 0x81	; 129
     b0a:	ff 4f       	sbci	r31, 0xFF	; 255
     b0c:	d8 01       	movw	r26, r16
     b0e:	c7 01       	movw	r24, r14
     b10:	8f 77       	andi	r24, 0x7F	; 127
     b12:	90 70       	andi	r25, 0x00	; 0
     b14:	a0 70       	andi	r26, 0x00	; 0
     b16:	b0 70       	andi	r27, 0x00	; 0
     b18:	80 34       	cpi	r24, 0x40	; 64
     b1a:	91 05       	cpc	r25, r1
     b1c:	a1 05       	cpc	r26, r1
     b1e:	b1 05       	cpc	r27, r1
     b20:	39 f4       	brne	.+14     	; 0xb30 <__pack_f+0x144>
     b22:	e7 fe       	sbrs	r14, 7
     b24:	0d c0       	rjmp	.+26     	; 0xb40 <__pack_f+0x154>
     b26:	80 e4       	ldi	r24, 0x40	; 64
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	04 c0       	rjmp	.+8      	; 0xb38 <__pack_f+0x14c>
     b30:	8f e3       	ldi	r24, 0x3F	; 63
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	a0 e0       	ldi	r26, 0x00	; 0
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	e8 0e       	add	r14, r24
     b3a:	f9 1e       	adc	r15, r25
     b3c:	0a 1f       	adc	r16, r26
     b3e:	1b 1f       	adc	r17, r27
     b40:	17 ff       	sbrs	r17, 7
     b42:	05 c0       	rjmp	.+10     	; 0xb4e <__pack_f+0x162>
     b44:	16 95       	lsr	r17
     b46:	07 95       	ror	r16
     b48:	f7 94       	ror	r15
     b4a:	e7 94       	ror	r14
     b4c:	31 96       	adiw	r30, 0x01	; 1
     b4e:	87 e0       	ldi	r24, 0x07	; 7
     b50:	16 95       	lsr	r17
     b52:	07 95       	ror	r16
     b54:	f7 94       	ror	r15
     b56:	e7 94       	ror	r14
     b58:	8a 95       	dec	r24
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__pack_f+0x164>
     b5c:	05 c0       	rjmp	.+10     	; 0xb68 <__pack_f+0x17c>
     b5e:	ee 24       	eor	r14, r14
     b60:	ff 24       	eor	r15, r15
     b62:	87 01       	movw	r16, r14
     b64:	ef ef       	ldi	r30, 0xFF	; 255
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	6e 2f       	mov	r22, r30
     b6a:	67 95       	ror	r22
     b6c:	66 27       	eor	r22, r22
     b6e:	67 95       	ror	r22
     b70:	90 2f       	mov	r25, r16
     b72:	9f 77       	andi	r25, 0x7F	; 127
     b74:	d7 94       	ror	r13
     b76:	dd 24       	eor	r13, r13
     b78:	d7 94       	ror	r13
     b7a:	8e 2f       	mov	r24, r30
     b7c:	86 95       	lsr	r24
     b7e:	49 2f       	mov	r20, r25
     b80:	46 2b       	or	r20, r22
     b82:	58 2f       	mov	r21, r24
     b84:	5d 29       	or	r21, r13
     b86:	b7 01       	movw	r22, r14
     b88:	ca 01       	movw	r24, r20
     b8a:	1f 91       	pop	r17
     b8c:	0f 91       	pop	r16
     b8e:	ff 90       	pop	r15
     b90:	ef 90       	pop	r14
     b92:	df 90       	pop	r13
     b94:	08 95       	ret

00000b96 <__unpack_f>:
     b96:	fc 01       	movw	r30, r24
     b98:	db 01       	movw	r26, r22
     b9a:	40 81       	ld	r20, Z
     b9c:	51 81       	ldd	r21, Z+1	; 0x01
     b9e:	22 81       	ldd	r18, Z+2	; 0x02
     ba0:	62 2f       	mov	r22, r18
     ba2:	6f 77       	andi	r22, 0x7F	; 127
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	22 1f       	adc	r18, r18
     ba8:	22 27       	eor	r18, r18
     baa:	22 1f       	adc	r18, r18
     bac:	93 81       	ldd	r25, Z+3	; 0x03
     bae:	89 2f       	mov	r24, r25
     bb0:	88 0f       	add	r24, r24
     bb2:	82 2b       	or	r24, r18
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	99 1f       	adc	r25, r25
     bba:	99 27       	eor	r25, r25
     bbc:	99 1f       	adc	r25, r25
     bbe:	11 96       	adiw	r26, 0x01	; 1
     bc0:	9c 93       	st	X, r25
     bc2:	11 97       	sbiw	r26, 0x01	; 1
     bc4:	21 15       	cp	r18, r1
     bc6:	31 05       	cpc	r19, r1
     bc8:	a9 f5       	brne	.+106    	; 0xc34 <__unpack_f+0x9e>
     bca:	41 15       	cp	r20, r1
     bcc:	51 05       	cpc	r21, r1
     bce:	61 05       	cpc	r22, r1
     bd0:	71 05       	cpc	r23, r1
     bd2:	11 f4       	brne	.+4      	; 0xbd8 <__unpack_f+0x42>
     bd4:	82 e0       	ldi	r24, 0x02	; 2
     bd6:	37 c0       	rjmp	.+110    	; 0xc46 <__unpack_f+0xb0>
     bd8:	82 e8       	ldi	r24, 0x82	; 130
     bda:	9f ef       	ldi	r25, 0xFF	; 255
     bdc:	13 96       	adiw	r26, 0x03	; 3
     bde:	9c 93       	st	X, r25
     be0:	8e 93       	st	-X, r24
     be2:	12 97       	sbiw	r26, 0x02	; 2
     be4:	9a 01       	movw	r18, r20
     be6:	ab 01       	movw	r20, r22
     be8:	67 e0       	ldi	r22, 0x07	; 7
     bea:	22 0f       	add	r18, r18
     bec:	33 1f       	adc	r19, r19
     bee:	44 1f       	adc	r20, r20
     bf0:	55 1f       	adc	r21, r21
     bf2:	6a 95       	dec	r22
     bf4:	d1 f7       	brne	.-12     	; 0xbea <__unpack_f+0x54>
     bf6:	83 e0       	ldi	r24, 0x03	; 3
     bf8:	8c 93       	st	X, r24
     bfa:	0d c0       	rjmp	.+26     	; 0xc16 <__unpack_f+0x80>
     bfc:	22 0f       	add	r18, r18
     bfe:	33 1f       	adc	r19, r19
     c00:	44 1f       	adc	r20, r20
     c02:	55 1f       	adc	r21, r21
     c04:	12 96       	adiw	r26, 0x02	; 2
     c06:	8d 91       	ld	r24, X+
     c08:	9c 91       	ld	r25, X
     c0a:	13 97       	sbiw	r26, 0x03	; 3
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	13 96       	adiw	r26, 0x03	; 3
     c10:	9c 93       	st	X, r25
     c12:	8e 93       	st	-X, r24
     c14:	12 97       	sbiw	r26, 0x02	; 2
     c16:	20 30       	cpi	r18, 0x00	; 0
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	38 07       	cpc	r19, r24
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	48 07       	cpc	r20, r24
     c20:	80 e4       	ldi	r24, 0x40	; 64
     c22:	58 07       	cpc	r21, r24
     c24:	58 f3       	brcs	.-42     	; 0xbfc <__unpack_f+0x66>
     c26:	14 96       	adiw	r26, 0x04	; 4
     c28:	2d 93       	st	X+, r18
     c2a:	3d 93       	st	X+, r19
     c2c:	4d 93       	st	X+, r20
     c2e:	5c 93       	st	X, r21
     c30:	17 97       	sbiw	r26, 0x07	; 7
     c32:	08 95       	ret
     c34:	2f 3f       	cpi	r18, 0xFF	; 255
     c36:	31 05       	cpc	r19, r1
     c38:	79 f4       	brne	.+30     	; 0xc58 <__unpack_f+0xc2>
     c3a:	41 15       	cp	r20, r1
     c3c:	51 05       	cpc	r21, r1
     c3e:	61 05       	cpc	r22, r1
     c40:	71 05       	cpc	r23, r1
     c42:	19 f4       	brne	.+6      	; 0xc4a <__unpack_f+0xb4>
     c44:	84 e0       	ldi	r24, 0x04	; 4
     c46:	8c 93       	st	X, r24
     c48:	08 95       	ret
     c4a:	64 ff       	sbrs	r22, 4
     c4c:	03 c0       	rjmp	.+6      	; 0xc54 <__unpack_f+0xbe>
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	8c 93       	st	X, r24
     c52:	12 c0       	rjmp	.+36     	; 0xc78 <__unpack_f+0xe2>
     c54:	1c 92       	st	X, r1
     c56:	10 c0       	rjmp	.+32     	; 0xc78 <__unpack_f+0xe2>
     c58:	2f 57       	subi	r18, 0x7F	; 127
     c5a:	30 40       	sbci	r19, 0x00	; 0
     c5c:	13 96       	adiw	r26, 0x03	; 3
     c5e:	3c 93       	st	X, r19
     c60:	2e 93       	st	-X, r18
     c62:	12 97       	sbiw	r26, 0x02	; 2
     c64:	83 e0       	ldi	r24, 0x03	; 3
     c66:	8c 93       	st	X, r24
     c68:	87 e0       	ldi	r24, 0x07	; 7
     c6a:	44 0f       	add	r20, r20
     c6c:	55 1f       	adc	r21, r21
     c6e:	66 1f       	adc	r22, r22
     c70:	77 1f       	adc	r23, r23
     c72:	8a 95       	dec	r24
     c74:	d1 f7       	brne	.-12     	; 0xc6a <__unpack_f+0xd4>
     c76:	70 64       	ori	r23, 0x40	; 64
     c78:	14 96       	adiw	r26, 0x04	; 4
     c7a:	4d 93       	st	X+, r20
     c7c:	5d 93       	st	X+, r21
     c7e:	6d 93       	st	X+, r22
     c80:	7c 93       	st	X, r23
     c82:	17 97       	sbiw	r26, 0x07	; 7
     c84:	08 95       	ret

00000c86 <__fpcmp_parts_f>:
     c86:	1f 93       	push	r17
     c88:	dc 01       	movw	r26, r24
     c8a:	fb 01       	movw	r30, r22
     c8c:	9c 91       	ld	r25, X
     c8e:	92 30       	cpi	r25, 0x02	; 2
     c90:	08 f4       	brcc	.+2      	; 0xc94 <__fpcmp_parts_f+0xe>
     c92:	47 c0       	rjmp	.+142    	; 0xd22 <__fpcmp_parts_f+0x9c>
     c94:	80 81       	ld	r24, Z
     c96:	82 30       	cpi	r24, 0x02	; 2
     c98:	08 f4       	brcc	.+2      	; 0xc9c <__fpcmp_parts_f+0x16>
     c9a:	43 c0       	rjmp	.+134    	; 0xd22 <__fpcmp_parts_f+0x9c>
     c9c:	94 30       	cpi	r25, 0x04	; 4
     c9e:	51 f4       	brne	.+20     	; 0xcb4 <__fpcmp_parts_f+0x2e>
     ca0:	11 96       	adiw	r26, 0x01	; 1
     ca2:	1c 91       	ld	r17, X
     ca4:	84 30       	cpi	r24, 0x04	; 4
     ca6:	99 f5       	brne	.+102    	; 0xd0e <__fpcmp_parts_f+0x88>
     ca8:	81 81       	ldd	r24, Z+1	; 0x01
     caa:	68 2f       	mov	r22, r24
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	61 1b       	sub	r22, r17
     cb0:	71 09       	sbc	r23, r1
     cb2:	3f c0       	rjmp	.+126    	; 0xd32 <__fpcmp_parts_f+0xac>
     cb4:	84 30       	cpi	r24, 0x04	; 4
     cb6:	21 f0       	breq	.+8      	; 0xcc0 <__fpcmp_parts_f+0x3a>
     cb8:	92 30       	cpi	r25, 0x02	; 2
     cba:	31 f4       	brne	.+12     	; 0xcc8 <__fpcmp_parts_f+0x42>
     cbc:	82 30       	cpi	r24, 0x02	; 2
     cbe:	b9 f1       	breq	.+110    	; 0xd2e <__fpcmp_parts_f+0xa8>
     cc0:	81 81       	ldd	r24, Z+1	; 0x01
     cc2:	88 23       	and	r24, r24
     cc4:	89 f1       	breq	.+98     	; 0xd28 <__fpcmp_parts_f+0xa2>
     cc6:	2d c0       	rjmp	.+90     	; 0xd22 <__fpcmp_parts_f+0x9c>
     cc8:	11 96       	adiw	r26, 0x01	; 1
     cca:	1c 91       	ld	r17, X
     ccc:	11 97       	sbiw	r26, 0x01	; 1
     cce:	82 30       	cpi	r24, 0x02	; 2
     cd0:	f1 f0       	breq	.+60     	; 0xd0e <__fpcmp_parts_f+0x88>
     cd2:	81 81       	ldd	r24, Z+1	; 0x01
     cd4:	18 17       	cp	r17, r24
     cd6:	d9 f4       	brne	.+54     	; 0xd0e <__fpcmp_parts_f+0x88>
     cd8:	12 96       	adiw	r26, 0x02	; 2
     cda:	2d 91       	ld	r18, X+
     cdc:	3c 91       	ld	r19, X
     cde:	13 97       	sbiw	r26, 0x03	; 3
     ce0:	82 81       	ldd	r24, Z+2	; 0x02
     ce2:	93 81       	ldd	r25, Z+3	; 0x03
     ce4:	82 17       	cp	r24, r18
     ce6:	93 07       	cpc	r25, r19
     ce8:	94 f0       	brlt	.+36     	; 0xd0e <__fpcmp_parts_f+0x88>
     cea:	28 17       	cp	r18, r24
     cec:	39 07       	cpc	r19, r25
     cee:	bc f0       	brlt	.+46     	; 0xd1e <__fpcmp_parts_f+0x98>
     cf0:	14 96       	adiw	r26, 0x04	; 4
     cf2:	8d 91       	ld	r24, X+
     cf4:	9d 91       	ld	r25, X+
     cf6:	0d 90       	ld	r0, X+
     cf8:	bc 91       	ld	r27, X
     cfa:	a0 2d       	mov	r26, r0
     cfc:	24 81       	ldd	r18, Z+4	; 0x04
     cfe:	35 81       	ldd	r19, Z+5	; 0x05
     d00:	46 81       	ldd	r20, Z+6	; 0x06
     d02:	57 81       	ldd	r21, Z+7	; 0x07
     d04:	28 17       	cp	r18, r24
     d06:	39 07       	cpc	r19, r25
     d08:	4a 07       	cpc	r20, r26
     d0a:	5b 07       	cpc	r21, r27
     d0c:	18 f4       	brcc	.+6      	; 0xd14 <__fpcmp_parts_f+0x8e>
     d0e:	11 23       	and	r17, r17
     d10:	41 f0       	breq	.+16     	; 0xd22 <__fpcmp_parts_f+0x9c>
     d12:	0a c0       	rjmp	.+20     	; 0xd28 <__fpcmp_parts_f+0xa2>
     d14:	82 17       	cp	r24, r18
     d16:	93 07       	cpc	r25, r19
     d18:	a4 07       	cpc	r26, r20
     d1a:	b5 07       	cpc	r27, r21
     d1c:	40 f4       	brcc	.+16     	; 0xd2e <__fpcmp_parts_f+0xa8>
     d1e:	11 23       	and	r17, r17
     d20:	19 f0       	breq	.+6      	; 0xd28 <__fpcmp_parts_f+0xa2>
     d22:	61 e0       	ldi	r22, 0x01	; 1
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	05 c0       	rjmp	.+10     	; 0xd32 <__fpcmp_parts_f+0xac>
     d28:	6f ef       	ldi	r22, 0xFF	; 255
     d2a:	7f ef       	ldi	r23, 0xFF	; 255
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <__fpcmp_parts_f+0xac>
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	cb 01       	movw	r24, r22
     d34:	1f 91       	pop	r17
     d36:	08 95       	ret

00000d38 <MTIMER0_voidInitialize>:
#include"math.h"

#define F_CPU     1000000UL
#define NumBits    256
void MTIMER0_voidInitialize(void)
{
     d38:	df 93       	push	r29
     d3a:	cf 93       	push	r28
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62

	/*Choose which waveform generation mode*/
	#if (WAVEFORM_GENERATION_MODE == NORMAL_WAVEFORM)
		CLR_BIT(TCCR0_REG, TCCR0_WGM00);
     d40:	a3 e5       	ldi	r26, 0x53	; 83
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	e3 e5       	ldi	r30, 0x53	; 83
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	8f 7b       	andi	r24, 0xBF	; 191
     d4c:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG, TCCR0_WGM01);
     d4e:	a3 e5       	ldi	r26, 0x53	; 83
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e3 e5       	ldi	r30, 0x53	; 83
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	87 7f       	andi	r24, 0xF7	; 247
     d5a:	8c 93       	st	X, r24
	#error wrong waveform generation mode
	#endif

	/*ENABLE which compare match mode*/
	#if ((COMPARE_OUTPUTMODE == NON_PWM_NORMAL_PORT_OPERATION_OC0) || (COMPARE_OUTPUTMODE == FAST_PWM_NORMAL_PORT_OPERATION_OC0) ||( COMPARE_OUTPUTMODE ==PHASE_PWM_NORMAL_PORT_OPERATION_OC0))
		CLR_BIT(TCCR0_REG, TCCR0_COM00);
     d5c:	a3 e5       	ldi	r26, 0x53	; 83
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e3 e5       	ldi	r30, 0x53	; 83
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	8f 7e       	andi	r24, 0xEF	; 239
     d68:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG, TCCR0_COM01);
     d6a:	a3 e5       	ldi	r26, 0x53	; 83
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e3 e5       	ldi	r30, 0x53	; 83
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	8f 7d       	andi	r24, 0xDF	; 223
     d76:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG, TCCR0_COM01);
	#else
	#error wrong compare match mode
	#endif

}
     d78:	cf 91       	pop	r28
     d7a:	df 91       	pop	r29
     d7c:	08 95       	ret

00000d7e <MTIMER0_voidStart>:

void MTIMER0_voidStart(void)
{
     d7e:	df 93       	push	r29
     d80:	cf 93       	push	r28
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSE CLOCK SELECT*/
	TCCR0_REG &=MASK_CLK;
     d86:	a3 e5       	ldi	r26, 0x53	; 83
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e3 e5       	ldi	r30, 0x53	; 83
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	88 7f       	andi	r24, 0xF8	; 248
     d92:	8c 93       	st	X, r24
	TCCR0_REG |=CLOCK_SELECT;
     d94:	a3 e5       	ldi	r26, 0x53	; 83
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e3 e5       	ldi	r30, 0x53	; 83
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	85 60       	ori	r24, 0x05	; 5
     da0:	8c 93       	st	X, r24

}
     da2:	cf 91       	pop	r28
     da4:	df 91       	pop	r29
     da6:	08 95       	ret

00000da8 <MTIMER0_voidGetTimer>:

void MTIMER0_voidGetTimer(u8 Delay)
{
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
     db0:	60 97       	sbiw	r28, 0x10	; 16
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	de bf       	out	0x3e, r29	; 62
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	cd bf       	out	0x3d, r28	; 61
     dbc:	88 8b       	std	Y+16, r24	; 0x10

   u8 InitialValue=0;
     dbe:	1f 86       	std	Y+15, r1	; 0x0f
   u16 NumOfOverflow=0,counter =0,value=0;
     dc0:	1e 86       	std	Y+14, r1	; 0x0e
     dc2:	1d 86       	std	Y+13, r1	; 0x0d
     dc4:	1c 86       	std	Y+12, r1	; 0x0c
     dc6:	1b 86       	std	Y+11, r1	; 0x0b
     dc8:	1a 86       	std	Y+10, r1	; 0x0a
     dca:	19 86       	std	Y+9, r1	; 0x09
   f32 TimeMaxDelay=0,TimeTick =0;
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	a0 e0       	ldi	r26, 0x00	; 0
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	8d 83       	std	Y+5, r24	; 0x05
     dd6:	9e 83       	std	Y+6, r25	; 0x06
     dd8:	af 83       	std	Y+7, r26	; 0x07
     dda:	b8 87       	std	Y+8, r27	; 0x08
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	a0 e0       	ldi	r26, 0x00	; 0
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	89 83       	std	Y+1, r24	; 0x01
     de6:	9a 83       	std	Y+2, r25	; 0x02
     de8:	ab 83       	std	Y+3, r26	; 0x03
     dea:	bc 83       	std	Y+4, r27	; 0x04

   /*Calculations for Delay*/
   TimeTick = Prescalar/F_CPU;
     dec:	8d eb       	ldi	r24, 0xBD	; 189
     dee:	97 e3       	ldi	r25, 0x37	; 55
     df0:	a6 e8       	ldi	r26, 0x86	; 134
     df2:	ba e3       	ldi	r27, 0x3A	; 58
     df4:	89 83       	std	Y+1, r24	; 0x01
     df6:	9a 83       	std	Y+2, r25	; 0x02
     df8:	ab 83       	std	Y+3, r26	; 0x03
     dfa:	bc 83       	std	Y+4, r27	; 0x04
   TimeMaxDelay = NumBits*TimeTick;
     dfc:	69 81       	ldd	r22, Y+1	; 0x01
     dfe:	7a 81       	ldd	r23, Y+2	; 0x02
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	9c 81       	ldd	r25, Y+4	; 0x04
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	40 e8       	ldi	r20, 0x80	; 128
     e0a:	53 e4       	ldi	r21, 0x43	; 67
     e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	8d 83       	std	Y+5, r24	; 0x05
     e16:	9e 83       	std	Y+6, r25	; 0x06
     e18:	af 83       	std	Y+7, r26	; 0x07
     e1a:	b8 87       	std	Y+8, r27	; 0x08
   value =(u16)(Delay/TimeTick);
     e1c:	88 89       	ldd	r24, Y+16	; 0x10
     e1e:	88 2f       	mov	r24, r24
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	aa 27       	eor	r26, r26
     e24:	97 fd       	sbrc	r25, 7
     e26:	a0 95       	com	r26
     e28:	ba 2f       	mov	r27, r26
     e2a:	bc 01       	movw	r22, r24
     e2c:	cd 01       	movw	r24, r26
     e2e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatsisf>
     e32:	dc 01       	movw	r26, r24
     e34:	cb 01       	movw	r24, r22
     e36:	bc 01       	movw	r22, r24
     e38:	cd 01       	movw	r24, r26
     e3a:	29 81       	ldd	r18, Y+1	; 0x01
     e3c:	3a 81       	ldd	r19, Y+2	; 0x02
     e3e:	4b 81       	ldd	r20, Y+3	; 0x03
     e40:	5c 81       	ldd	r21, Y+4	; 0x04
     e42:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     e46:	dc 01       	movw	r26, r24
     e48:	cb 01       	movw	r24, r22
     e4a:	bc 01       	movw	r22, r24
     e4c:	cd 01       	movw	r24, r26
     e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	9a 87       	std	Y+10, r25	; 0x0a
     e58:	89 87       	std	Y+9, r24	; 0x09
   NumOfOverflow = ceil (Delay/TimeMaxDelay);
     e5a:	88 89       	ldd	r24, Y+16	; 0x10
     e5c:	88 2f       	mov	r24, r24
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	aa 27       	eor	r26, r26
     e62:	97 fd       	sbrc	r25, 7
     e64:	a0 95       	com	r26
     e66:	ba 2f       	mov	r27, r26
     e68:	bc 01       	movw	r22, r24
     e6a:	cd 01       	movw	r24, r26
     e6c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatsisf>
     e70:	dc 01       	movw	r26, r24
     e72:	cb 01       	movw	r24, r22
     e74:	bc 01       	movw	r22, r24
     e76:	cd 01       	movw	r24, r26
     e78:	2d 81       	ldd	r18, Y+5	; 0x05
     e7a:	3e 81       	ldd	r19, Y+6	; 0x06
     e7c:	4f 81       	ldd	r20, Y+7	; 0x07
     e7e:	58 85       	ldd	r21, Y+8	; 0x08
     e80:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	bc 01       	movw	r22, r24
     e8a:	cd 01       	movw	r24, r26
     e8c:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <ceil>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	bc 01       	movw	r22, r24
     e96:	cd 01       	movw	r24, r26
     e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9c:	dc 01       	movw	r26, r24
     e9e:	cb 01       	movw	r24, r22
     ea0:	9e 87       	std	Y+14, r25	; 0x0e
     ea2:	8d 87       	std	Y+13, r24	; 0x0d
   InitialValue = NumBits - ( value % NumOfOverflow);
     ea4:	89 85       	ldd	r24, Y+9	; 0x09
     ea6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea8:	2d 85       	ldd	r18, Y+13	; 0x0d
     eaa:	3e 85       	ldd	r19, Y+14	; 0x0e
     eac:	b9 01       	movw	r22, r18
     eae:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <__udivmodhi4>
     eb2:	81 95       	neg	r24
     eb4:	8f 87       	std	Y+15, r24	; 0x0f

	/*Set Initial value */
	TCNT0_REG = InitialValue;
     eb6:	e2 e5       	ldi	r30, 0x52	; 82
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	8f 85       	ldd	r24, Y+15	; 0x0f
     ebc:	80 83       	st	Z, r24
     ebe:	15 c0       	rjmp	.+42     	; 0xeea <MTIMER0_voidGetTimer+0x142>

   while(counter < NumOfOverflow)
   	{
   		while((TIFR_REG & (1<<TIFR_TOV0)) == 0);
     ec0:	e8 e5       	ldi	r30, 0x58	; 88
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	88 2f       	mov	r24, r24
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	81 70       	andi	r24, 0x01	; 1
     ecc:	90 70       	andi	r25, 0x00	; 0
     ece:	00 97       	sbiw	r24, 0x00	; 0
     ed0:	b9 f3       	breq	.-18     	; 0xec0 <MTIMER0_voidGetTimer+0x118>
   		SET_BIT(TIFR_REG,TIFR_TOV0);
     ed2:	a8 e5       	ldi	r26, 0x58	; 88
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e8 e5       	ldi	r30, 0x58	; 88
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	81 60       	ori	r24, 0x01	; 1
     ede:	8c 93       	st	X, r24
   		counter++;
     ee0:	8b 85       	ldd	r24, Y+11	; 0x0b
     ee2:	9c 85       	ldd	r25, Y+12	; 0x0c
     ee4:	01 96       	adiw	r24, 0x01	; 1
     ee6:	9c 87       	std	Y+12, r25	; 0x0c
     ee8:	8b 87       	std	Y+11, r24	; 0x0b
   InitialValue = NumBits - ( value % NumOfOverflow);

	/*Set Initial value */
	TCNT0_REG = InitialValue;

   while(counter < NumOfOverflow)
     eea:	2b 85       	ldd	r18, Y+11	; 0x0b
     eec:	3c 85       	ldd	r19, Y+12	; 0x0c
     eee:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef2:	28 17       	cp	r18, r24
     ef4:	39 07       	cpc	r19, r25
     ef6:	20 f3       	brcs	.-56     	; 0xec0 <MTIMER0_voidGetTimer+0x118>
   		while((TIFR_REG & (1<<TIFR_TOV0)) == 0);
   		SET_BIT(TIFR_REG,TIFR_TOV0);
   		counter++;
   	}

}
     ef8:	60 96       	adiw	r28, 0x10	; 16
     efa:	0f b6       	in	r0, 0x3f	; 63
     efc:	f8 94       	cli
     efe:	de bf       	out	0x3e, r29	; 62
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	cd bf       	out	0x3d, r28	; 61
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	08 95       	ret

00000f0a <MTIMER0_voidStop>:

void MTIMER0_voidStop(void)
{
     f0a:	df 93       	push	r29
     f0c:	cf 93       	push	r28
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
		CLR_BIT(TCCR0_REG,TCCR0_CS00);
     f12:	a3 e5       	ldi	r26, 0x53	; 83
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e3 e5       	ldi	r30, 0x53	; 83
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	8e 7f       	andi	r24, 0xFE	; 254
     f1e:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,TCCR0_CS01);
     f20:	a3 e5       	ldi	r26, 0x53	; 83
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e3 e5       	ldi	r30, 0x53	; 83
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	8d 7f       	andi	r24, 0xFD	; 253
     f2c:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,TCCR0_CS02);
     f2e:	a3 e5       	ldi	r26, 0x53	; 83
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e3 e5       	ldi	r30, 0x53	; 83
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	8b 7f       	andi	r24, 0xFB	; 251
     f3a:	8c 93       	st	X, r24


}
     f3c:	cf 91       	pop	r28
     f3e:	df 91       	pop	r29
     f40:	08 95       	ret

00000f42 <MEXTI_voidEXTINT_SenseControl>:

/* define global pointer to function ISR INT0 takes void and return void*/
//void (*EXTINT_PtrINT0Func_ISR)(void)= NULL;

u8 MEXTI_voidEXTINT_SenseControl(u8 copy_u8ControlSense, u8 copy_u8Num_INT)  //post build method
{
     f42:	df 93       	push	r29
     f44:	cf 93       	push	r28
     f46:	00 d0       	rcall	.+0      	; 0xf48 <MEXTI_voidEXTINT_SenseControl+0x6>
     f48:	00 d0       	rcall	.+0      	; 0xf4a <MEXTI_voidEXTINT_SenseControl+0x8>
     f4a:	0f 92       	push	r0
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	8a 83       	std	Y+2, r24	; 0x02
     f52:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8statusError = OK;
     f54:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8Num_INT)
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	3d 83       	std	Y+5, r19	; 0x05
     f5e:	2c 83       	std	Y+4, r18	; 0x04
     f60:	8c 81       	ldd	r24, Y+4	; 0x04
     f62:	9d 81       	ldd	r25, Y+5	; 0x05
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	91 05       	cpc	r25, r1
     f68:	09 f4       	brne	.+2      	; 0xf6c <MEXTI_voidEXTINT_SenseControl+0x2a>
     f6a:	70 c0       	rjmp	.+224    	; 0x104c <MEXTI_voidEXTINT_SenseControl+0x10a>
     f6c:	2c 81       	ldd	r18, Y+4	; 0x04
     f6e:	3d 81       	ldd	r19, Y+5	; 0x05
     f70:	22 30       	cpi	r18, 0x02	; 2
     f72:	31 05       	cpc	r19, r1
     f74:	09 f4       	brne	.+2      	; 0xf78 <MEXTI_voidEXTINT_SenseControl+0x36>
     f76:	ce c0       	rjmp	.+412    	; 0x1114 <MEXTI_voidEXTINT_SenseControl+0x1d2>
     f78:	8c 81       	ldd	r24, Y+4	; 0x04
     f7a:	9d 81       	ldd	r25, Y+5	; 0x05
     f7c:	00 97       	sbiw	r24, 0x00	; 0
     f7e:	09 f0       	breq	.+2      	; 0xf82 <MEXTI_voidEXTINT_SenseControl+0x40>
     f80:	ed c0       	rjmp	.+474    	; 0x115c <MEXTI_voidEXTINT_SenseControl+0x21a>
	{
		case EXIT_INF0:
		if(copy_u8ControlSense == EXIT_LOW_LEVEL_MODE )
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	b1 f4       	brne	.+44     	; 0xfb4 <MEXTI_voidEXTINT_SenseControl+0x72>
		{
			CLR_BIT(MCUCR_REG ,MCUCR_ISC00);
     f88:	a5 e5       	ldi	r26, 0x55	; 85
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e5 e5       	ldi	r30, 0x55	; 85
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	8e 7f       	andi	r24, 0xFE	; 254
     f94:	8c 93       	st	X, r24
	        CLR_BIT(MCUCR_REG ,MCUCR_ISC01);
     f96:	a5 e5       	ldi	r26, 0x55	; 85
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e5 e5       	ldi	r30, 0x55	; 85
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	8d 7f       	andi	r24, 0xFD	; 253
     fa2:	8c 93       	st	X, r24
			//peripheral interrupt enable for int0
	        SET_BIT(GICR_REG ,GICR_INT0);
     fa4:	ab e5       	ldi	r26, 0x5B	; 91
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	eb e5       	ldi	r30, 0x5B	; 91
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	80 64       	ori	r24, 0x40	; 64
     fb0:	8c 93       	st	X, r24
     fb2:	d6 c0       	rjmp	.+428    	; 0x1160 <MEXTI_voidEXTINT_SenseControl+0x21e>
		}

		else if(copy_u8ControlSense == EXIT_ANY_LOGICAL_CHANGE_MODE )
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	82 30       	cpi	r24, 0x02	; 2
     fb8:	b1 f4       	brne	.+44     	; 0xfe6 <MEXTI_voidEXTINT_SenseControl+0xa4>
		{
			SET_BIT(MCUCR_REG ,MCUCR_ISC00);
     fba:	a5 e5       	ldi	r26, 0x55	; 85
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e5 e5       	ldi	r30, 0x55	; 85
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	81 60       	ori	r24, 0x01	; 1
     fc6:	8c 93       	st	X, r24
	        CLR_BIT(MCUCR_REG ,MCUCR_ISC01);
     fc8:	a5 e5       	ldi	r26, 0x55	; 85
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e5 e5       	ldi	r30, 0x55	; 85
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	8d 7f       	andi	r24, 0xFD	; 253
     fd4:	8c 93       	st	X, r24
			//peripheral interrupt enable for int0
	        SET_BIT(GICR_REG ,GICR_INT0);
     fd6:	ab e5       	ldi	r26, 0x5B	; 91
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	eb e5       	ldi	r30, 0x5B	; 91
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	80 64       	ori	r24, 0x40	; 64
     fe2:	8c 93       	st	X, r24
     fe4:	bd c0       	rjmp	.+378    	; 0x1160 <MEXTI_voidEXTINT_SenseControl+0x21e>
		}

		else if(copy_u8ControlSense == EXIT_ANY_FALLING_EDGE_MODE)
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	83 30       	cpi	r24, 0x03	; 3
     fea:	b1 f4       	brne	.+44     	; 0x1018 <MEXTI_voidEXTINT_SenseControl+0xd6>
		{
			CLR_BIT(MCUCR_REG ,MCUCR_ISC00);
     fec:	a5 e5       	ldi	r26, 0x55	; 85
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e5 e5       	ldi	r30, 0x55	; 85
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	8e 7f       	andi	r24, 0xFE	; 254
     ff8:	8c 93       	st	X, r24
	        SET_BIT(MCUCR_REG ,MCUCR_ISC01);
     ffa:	a5 e5       	ldi	r26, 0x55	; 85
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e5 e5       	ldi	r30, 0x55	; 85
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	82 60       	ori	r24, 0x02	; 2
    1006:	8c 93       	st	X, r24
			//peripheral interrupt enable for int0
	        SET_BIT(GICR_REG ,GICR_INT0);
    1008:	ab e5       	ldi	r26, 0x5B	; 91
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	eb e5       	ldi	r30, 0x5B	; 91
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	80 64       	ori	r24, 0x40	; 64
    1014:	8c 93       	st	X, r24
    1016:	a4 c0       	rjmp	.+328    	; 0x1160 <MEXTI_voidEXTINT_SenseControl+0x21e>
		}

		else if(copy_u8ControlSense == EXIT_ANY_RISING_EDGE_MODE)
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	84 30       	cpi	r24, 0x04	; 4
    101c:	09 f0       	breq	.+2      	; 0x1020 <MEXTI_voidEXTINT_SenseControl+0xde>
    101e:	a0 c0       	rjmp	.+320    	; 0x1160 <MEXTI_voidEXTINT_SenseControl+0x21e>
		{
			SET_BIT(MCUCR_REG ,MCUCR_ISC00);
    1020:	a5 e5       	ldi	r26, 0x55	; 85
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e5 e5       	ldi	r30, 0x55	; 85
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	81 60       	ori	r24, 0x01	; 1
    102c:	8c 93       	st	X, r24
	        SET_BIT(MCUCR_REG ,MCUCR_ISC01);
    102e:	a5 e5       	ldi	r26, 0x55	; 85
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e5 e5       	ldi	r30, 0x55	; 85
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	82 60       	ori	r24, 0x02	; 2
    103a:	8c 93       	st	X, r24
			//peripheral interrupt enable for int0
	        SET_BIT(GICR_REG ,GICR_INT0);
    103c:	ab e5       	ldi	r26, 0x5B	; 91
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	eb e5       	ldi	r30, 0x5B	; 91
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	80 64       	ori	r24, 0x40	; 64
    1048:	8c 93       	st	X, r24
    104a:	8a c0       	rjmp	.+276    	; 0x1160 <MEXTI_voidEXTINT_SenseControl+0x21e>
					//invalid control Sense
		}
		break;

		case EXIT_INF1:
		if(copy_u8ControlSense == EXIT_LOW_LEVEL_MODE )
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	b1 f4       	brne	.+44     	; 0x107e <MEXTI_voidEXTINT_SenseControl+0x13c>
		{
			CLR_BIT(MCUCR_REG ,MCUCR_ISC10);
    1052:	a5 e5       	ldi	r26, 0x55	; 85
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e5 e5       	ldi	r30, 0x55	; 85
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	8b 7f       	andi	r24, 0xFB	; 251
    105e:	8c 93       	st	X, r24
	        CLR_BIT(MCUCR_REG ,MCUCR_ISC11);
    1060:	a5 e5       	ldi	r26, 0x55	; 85
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e5 e5       	ldi	r30, 0x55	; 85
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	87 7f       	andi	r24, 0xF7	; 247
    106c:	8c 93       	st	X, r24
			//peripheral interrupt enable for int1
	        SET_BIT(GICR_REG ,GICR_INT1);
    106e:	ab e5       	ldi	r26, 0x5B	; 91
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	eb e5       	ldi	r30, 0x5B	; 91
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	80 68       	ori	r24, 0x80	; 128
    107a:	8c 93       	st	X, r24
    107c:	71 c0       	rjmp	.+226    	; 0x1160 <MEXTI_voidEXTINT_SenseControl+0x21e>
		}

		else if(copy_u8ControlSense == EXIT_ANY_LOGICAL_CHANGE_MODE )
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	82 30       	cpi	r24, 0x02	; 2
    1082:	b1 f4       	brne	.+44     	; 0x10b0 <MEXTI_voidEXTINT_SenseControl+0x16e>
		{
			SET_BIT(MCUCR_REG ,MCUCR_ISC10);
    1084:	a5 e5       	ldi	r26, 0x55	; 85
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e5 e5       	ldi	r30, 0x55	; 85
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	84 60       	ori	r24, 0x04	; 4
    1090:	8c 93       	st	X, r24
	        CLR_BIT(MCUCR_REG ,MCUCR_ISC11);
    1092:	a5 e5       	ldi	r26, 0x55	; 85
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e5 e5       	ldi	r30, 0x55	; 85
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	87 7f       	andi	r24, 0xF7	; 247
    109e:	8c 93       	st	X, r24
			//peripheral interrupt enable for int1
	        SET_BIT(GICR_REG ,GICR_INT1);
    10a0:	ab e5       	ldi	r26, 0x5B	; 91
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	eb e5       	ldi	r30, 0x5B	; 91
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	80 68       	ori	r24, 0x80	; 128
    10ac:	8c 93       	st	X, r24
    10ae:	58 c0       	rjmp	.+176    	; 0x1160 <MEXTI_voidEXTINT_SenseControl+0x21e>
		}

		else if(copy_u8ControlSense == EXIT_ANY_FALLING_EDGE_MODE)
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	83 30       	cpi	r24, 0x03	; 3
    10b4:	b1 f4       	brne	.+44     	; 0x10e2 <MEXTI_voidEXTINT_SenseControl+0x1a0>
		{
			CLR_BIT(MCUCR_REG ,MCUCR_ISC10);
    10b6:	a5 e5       	ldi	r26, 0x55	; 85
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e5 e5       	ldi	r30, 0x55	; 85
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	8b 7f       	andi	r24, 0xFB	; 251
    10c2:	8c 93       	st	X, r24
	        SET_BIT(MCUCR_REG ,MCUCR_ISC11);
    10c4:	a5 e5       	ldi	r26, 0x55	; 85
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e5 e5       	ldi	r30, 0x55	; 85
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	88 60       	ori	r24, 0x08	; 8
    10d0:	8c 93       	st	X, r24
			//peripheral interrupt enable for int1
	        SET_BIT(GICR_REG ,GICR_INT1);
    10d2:	ab e5       	ldi	r26, 0x5B	; 91
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	eb e5       	ldi	r30, 0x5B	; 91
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	80 68       	ori	r24, 0x80	; 128
    10de:	8c 93       	st	X, r24
    10e0:	3f c0       	rjmp	.+126    	; 0x1160 <MEXTI_voidEXTINT_SenseControl+0x21e>
		}

		else if(copy_u8ControlSense == EXIT_ANY_RISING_EDGE_MODE)
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	84 30       	cpi	r24, 0x04	; 4
    10e6:	e1 f5       	brne	.+120    	; 0x1160 <MEXTI_voidEXTINT_SenseControl+0x21e>
		{
			SET_BIT(MCUCR_REG ,MCUCR_ISC10);
    10e8:	a5 e5       	ldi	r26, 0x55	; 85
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e5 e5       	ldi	r30, 0x55	; 85
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	84 60       	ori	r24, 0x04	; 4
    10f4:	8c 93       	st	X, r24
	        SET_BIT(MCUCR_REG ,MCUCR_ISC11);
    10f6:	a5 e5       	ldi	r26, 0x55	; 85
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e5 e5       	ldi	r30, 0x55	; 85
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	88 60       	ori	r24, 0x08	; 8
    1102:	8c 93       	st	X, r24
			//peripheral interrupt enable for int1
	        SET_BIT(GICR_REG ,GICR_INT1);
    1104:	ab e5       	ldi	r26, 0x5B	; 91
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	eb e5       	ldi	r30, 0x5B	; 91
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	80 68       	ori	r24, 0x80	; 128
    1110:	8c 93       	st	X, r24
    1112:	26 c0       	rjmp	.+76     	; 0x1160 <MEXTI_voidEXTINT_SenseControl+0x21e>
		else{
					//invalid control Sense
		}
		break;
		case EXIT_INF2:
	    if (copy_u8ControlSense == EXIT_ANY_RISING_EDGE_MODE)
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	84 30       	cpi	r24, 0x04	; 4
    1118:	79 f4       	brne	.+30     	; 0x1138 <MEXTI_voidEXTINT_SenseControl+0x1f6>
	   {
		SET_BIT(MCUCSR_REG ,MCUCSR_INT2);
    111a:	a4 e5       	ldi	r26, 0x54	; 84
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e4 e5       	ldi	r30, 0x54	; 84
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	80 64       	ori	r24, 0x40	; 64
    1126:	8c 93       	st	X, r24
		SET_BIT(GICR_REG ,GICR_INT2);
    1128:	ab e5       	ldi	r26, 0x5B	; 91
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	eb e5       	ldi	r30, 0x5B	; 91
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	80 62       	ori	r24, 0x20	; 32
    1134:	8c 93       	st	X, r24
    1136:	14 c0       	rjmp	.+40     	; 0x1160 <MEXTI_voidEXTINT_SenseControl+0x21e>
	   }
	    else if(copy_u8ControlSense == EXIT_ANY_FALLING_EDGE_MODE)
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	83 30       	cpi	r24, 0x03	; 3
    113c:	89 f4       	brne	.+34     	; 0x1160 <MEXTI_voidEXTINT_SenseControl+0x21e>
   	   {
		CLR_BIT(MCUCSR_REG ,MCUCSR_INT2);
    113e:	a4 e5       	ldi	r26, 0x54	; 84
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e4 e5       	ldi	r30, 0x54	; 84
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	8f 7b       	andi	r24, 0xBF	; 191
    114a:	8c 93       	st	X, r24
		SET_BIT(GICR_REG ,GICR_INT2);
    114c:	ab e5       	ldi	r26, 0x5B	; 91
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	eb e5       	ldi	r30, 0x5B	; 91
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	80 62       	ori	r24, 0x20	; 32
    1158:	8c 93       	st	X, r24
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <MEXTI_voidEXTINT_SenseControl+0x21e>
					//invalid control Sense
		}
		break;

  	default:
  		 Local_u8statusError= NOT_OK;
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	89 83       	std	Y+1, r24	; 0x01
  		break;
  	}
	return Local_u8statusError;
    1160:	89 81       	ldd	r24, Y+1	; 0x01
}
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <MEXTI_voidEXTINT_Enable>:

u8 MEXTI_voidEXTINT_Enable(u8 copy_u8Num_INT)
{
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	00 d0       	rcall	.+0      	; 0x1178 <MEXTI_voidEXTINT_Enable+0x6>
    1178:	00 d0       	rcall	.+0      	; 0x117a <MEXTI_voidEXTINT_Enable+0x8>
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_U8Enable_error = OK;
    1180:	19 82       	std	Y+1, r1	; 0x01
		switch(copy_u8Num_INT)
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	3c 83       	std	Y+4, r19	; 0x04
    118a:	2b 83       	std	Y+3, r18	; 0x03
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	9c 81       	ldd	r25, Y+4	; 0x04
    1190:	81 30       	cpi	r24, 0x01	; 1
    1192:	91 05       	cpc	r25, r1
    1194:	89 f0       	breq	.+34     	; 0x11b8 <MEXTI_voidEXTINT_Enable+0x46>
    1196:	2b 81       	ldd	r18, Y+3	; 0x03
    1198:	3c 81       	ldd	r19, Y+4	; 0x04
    119a:	22 30       	cpi	r18, 0x02	; 2
    119c:	31 05       	cpc	r19, r1
    119e:	a1 f0       	breq	.+40     	; 0x11c8 <MEXTI_voidEXTINT_Enable+0x56>
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	9c 81       	ldd	r25, Y+4	; 0x04
    11a4:	00 97       	sbiw	r24, 0x00	; 0
    11a6:	c1 f4       	brne	.+48     	; 0x11d8 <MEXTI_voidEXTINT_Enable+0x66>
		{
			case EXIT_INF0:
			SET_BIT(GICR_REG ,GICR_INT0);
    11a8:	ab e5       	ldi	r26, 0x5B	; 91
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	eb e5       	ldi	r30, 0x5B	; 91
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	80 64       	ori	r24, 0x40	; 64
    11b4:	8c 93       	st	X, r24
    11b6:	12 c0       	rjmp	.+36     	; 0x11dc <MEXTI_voidEXTINT_Enable+0x6a>
			break;

			case EXIT_INF1:
			SET_BIT(GICR_REG ,GICR_INT1);
    11b8:	ab e5       	ldi	r26, 0x5B	; 91
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	eb e5       	ldi	r30, 0x5B	; 91
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	80 68       	ori	r24, 0x80	; 128
    11c4:	8c 93       	st	X, r24
    11c6:	0a c0       	rjmp	.+20     	; 0x11dc <MEXTI_voidEXTINT_Enable+0x6a>
			break;

			case EXIT_INF2:
			SET_BIT(GICR_REG ,GICR_INT2);
    11c8:	ab e5       	ldi	r26, 0x5B	; 91
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	eb e5       	ldi	r30, 0x5B	; 91
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	80 62       	ori	r24, 0x20	; 32
    11d4:	8c 93       	st	X, r24
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <MEXTI_voidEXTINT_Enable+0x6a>
			break;

			default:
				local_U8Enable_error = NOT_OK;
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	89 83       	std	Y+1, r24	; 0x01
		    break;
		}
		 return local_U8Enable_error ;
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
	}
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	cf 91       	pop	r28
    11e8:	df 91       	pop	r29
    11ea:	08 95       	ret

000011ec <MEXTI_voidEXTINT_Disable>:



u8 MEXTI_voidEXTINT_Disable(u8 copy_u8Num_INT)
{
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <MEXTI_voidEXTINT_Disable+0x6>
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <MEXTI_voidEXTINT_Disable+0x8>
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
    11f8:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_U8Disable_error = OK;
    11fa:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8Num_INT)
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	3c 83       	std	Y+4, r19	; 0x04
    1204:	2b 83       	std	Y+3, r18	; 0x03
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	9c 81       	ldd	r25, Y+4	; 0x04
    120a:	81 30       	cpi	r24, 0x01	; 1
    120c:	91 05       	cpc	r25, r1
    120e:	89 f0       	breq	.+34     	; 0x1232 <MEXTI_voidEXTINT_Disable+0x46>
    1210:	2b 81       	ldd	r18, Y+3	; 0x03
    1212:	3c 81       	ldd	r19, Y+4	; 0x04
    1214:	22 30       	cpi	r18, 0x02	; 2
    1216:	31 05       	cpc	r19, r1
    1218:	a1 f0       	breq	.+40     	; 0x1242 <MEXTI_voidEXTINT_Disable+0x56>
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	9c 81       	ldd	r25, Y+4	; 0x04
    121e:	00 97       	sbiw	r24, 0x00	; 0
    1220:	c1 f4       	brne	.+48     	; 0x1252 <MEXTI_voidEXTINT_Disable+0x66>
	{
		case EXIT_INF0:
		CLR_BIT(GICR_REG ,GICR_INT0);
    1222:	ab e5       	ldi	r26, 0x5B	; 91
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	eb e5       	ldi	r30, 0x5B	; 91
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	8f 7b       	andi	r24, 0xBF	; 191
    122e:	8c 93       	st	X, r24
    1230:	12 c0       	rjmp	.+36     	; 0x1256 <MEXTI_voidEXTINT_Disable+0x6a>
		break;

		case EXIT_INF1:
		CLR_BIT(GICR_REG ,GICR_INT1);
    1232:	ab e5       	ldi	r26, 0x5B	; 91
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	eb e5       	ldi	r30, 0x5B	; 91
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	8f 77       	andi	r24, 0x7F	; 127
    123e:	8c 93       	st	X, r24
    1240:	0a c0       	rjmp	.+20     	; 0x1256 <MEXTI_voidEXTINT_Disable+0x6a>
		break;

		case EXIT_INF2:
		CLR_BIT(GICR_REG ,GICR_INT2);
    1242:	ab e5       	ldi	r26, 0x5B	; 91
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	eb e5       	ldi	r30, 0x5B	; 91
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	8f 7d       	andi	r24, 0xDF	; 223
    124e:	8c 93       	st	X, r24
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <MEXTI_voidEXTINT_Disable+0x6a>
		break;

		default:
			local_U8Disable_error = NOT_OK;
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	89 83       	std	Y+1, r24	; 0x01
	    break;
	}
	 return local_U8Disable_error ;
    1256:	89 81       	ldd	r24, Y+1	; 0x01
}
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <MGIE_voidGIEEnable>:
#include "../../BIT_MATH.h"
#include"GIE_registers.h"
#include"GIE_interface.h"

void MGIE_voidGIEEnable(void)
{
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GIE_SREG,GIE_I);
    126e:	af e5       	ldi	r26, 0x5F	; 95
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	ef e5       	ldi	r30, 0x5F	; 95
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	80 68       	ori	r24, 0x80	; 128
    127a:	8c 93       	st	X, r24
}
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <MGIE_voidGIEDisable>:

void MGIE_voidGIEDisable(void)
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GIE_SREG, GIE_I);
    128a:	af e5       	ldi	r26, 0x5F	; 95
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	ef e5       	ldi	r30, 0x5F	; 95
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	8f 77       	andi	r24, 0x7F	; 127
    1296:	8c 93       	st	X, r24
}
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <MDIO_voidSetPortDirection>:
#include "DIO_registers.h"
#include "DIO_interface.h"
#include "DIO_private.h"
/* port functions implementation*/
void MDIO_voidSetPortDirection(u8 copy_u8PortId, u8 copy_u8PortDirection)
{
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <MDIO_voidSetPortDirection+0x6>
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <MDIO_voidSetPortDirection+0x8>
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	89 83       	std	Y+1, r24	; 0x01
    12ac:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8PortId)
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	3c 83       	std	Y+4, r19	; 0x04
    12b6:	2b 83       	std	Y+3, r18	; 0x03
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	9c 81       	ldd	r25, Y+4	; 0x04
    12bc:	81 30       	cpi	r24, 0x01	; 1
    12be:	91 05       	cpc	r25, r1
    12c0:	21 f1       	breq	.+72     	; 0x130a <MDIO_voidSetPortDirection+0x6c>
    12c2:	2b 81       	ldd	r18, Y+3	; 0x03
    12c4:	3c 81       	ldd	r19, Y+4	; 0x04
    12c6:	22 30       	cpi	r18, 0x02	; 2
    12c8:	31 05       	cpc	r19, r1
    12ca:	2c f4       	brge	.+10     	; 0x12d6 <MDIO_voidSetPortDirection+0x38>
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	00 97       	sbiw	r24, 0x00	; 0
    12d2:	61 f0       	breq	.+24     	; 0x12ec <MDIO_voidSetPortDirection+0x4e>
    12d4:	46 c0       	rjmp	.+140    	; 0x1362 <MDIO_voidSetPortDirection+0xc4>
    12d6:	2b 81       	ldd	r18, Y+3	; 0x03
    12d8:	3c 81       	ldd	r19, Y+4	; 0x04
    12da:	22 30       	cpi	r18, 0x02	; 2
    12dc:	31 05       	cpc	r19, r1
    12de:	21 f1       	breq	.+72     	; 0x1328 <MDIO_voidSetPortDirection+0x8a>
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	9c 81       	ldd	r25, Y+4	; 0x04
    12e4:	83 30       	cpi	r24, 0x03	; 3
    12e6:	91 05       	cpc	r25, r1
    12e8:	71 f1       	breq	.+92     	; 0x1346 <MDIO_voidSetPortDirection+0xa8>
    12ea:	3b c0       	rjmp	.+118    	; 0x1362 <MDIO_voidSetPortDirection+0xc4>
	{
		case PORTA:
        if(copy_u8PortDirection  == OUTPUT)
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	81 30       	cpi	r24, 0x01	; 1
    12f0:	29 f4       	brne	.+10     	; 0x12fc <MDIO_voidSetPortDirection+0x5e>
		{
		DDRA_REG=0xff;
    12f2:	ea e3       	ldi	r30, 0x3A	; 58
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	8f ef       	ldi	r24, 0xFF	; 255
    12f8:	80 83       	st	Z, r24
    12fa:	33 c0       	rjmp	.+102    	; 0x1362 <MDIO_voidSetPortDirection+0xc4>
		}
		else if(copy_u8PortDirection  == INPUT){
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	88 23       	and	r24, r24
    1300:	81 f5       	brne	.+96     	; 0x1362 <MDIO_voidSetPortDirection+0xc4>
			DDRA_REG=0;
    1302:	ea e3       	ldi	r30, 0x3A	; 58
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	10 82       	st	Z, r1
    1308:	2c c0       	rjmp	.+88     	; 0x1362 <MDIO_voidSetPortDirection+0xc4>
			// invalid direction
		}
		break;
		
		case PORTB: 
		  if(copy_u8PortDirection  == OUTPUT)
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	81 30       	cpi	r24, 0x01	; 1
    130e:	29 f4       	brne	.+10     	; 0x131a <MDIO_voidSetPortDirection+0x7c>
		{
		DDRB_REG=0xff;
    1310:	e7 e3       	ldi	r30, 0x37	; 55
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	8f ef       	ldi	r24, 0xFF	; 255
    1316:	80 83       	st	Z, r24
    1318:	24 c0       	rjmp	.+72     	; 0x1362 <MDIO_voidSetPortDirection+0xc4>
		}
		else if((copy_u8PortDirection  == INPUT)){
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	88 23       	and	r24, r24
    131e:	09 f5       	brne	.+66     	; 0x1362 <MDIO_voidSetPortDirection+0xc4>
			DDRB_REG=0;
    1320:	e7 e3       	ldi	r30, 0x37	; 55
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	10 82       	st	Z, r1
    1326:	1d c0       	rjmp	.+58     	; 0x1362 <MDIO_voidSetPortDirection+0xc4>
			// invalid direction
		}
		break;
		
		case PORTC: 
		  if(copy_u8PortDirection  == OUTPUT)
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	29 f4       	brne	.+10     	; 0x1338 <MDIO_voidSetPortDirection+0x9a>
		{
		DDRC_REG=0xff;
    132e:	e4 e3       	ldi	r30, 0x34	; 52
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	8f ef       	ldi	r24, 0xFF	; 255
    1334:	80 83       	st	Z, r24
    1336:	15 c0       	rjmp	.+42     	; 0x1362 <MDIO_voidSetPortDirection+0xc4>
		}
		else if((copy_u8PortDirection  == INPUT)){
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	88 23       	and	r24, r24
    133c:	91 f4       	brne	.+36     	; 0x1362 <MDIO_voidSetPortDirection+0xc4>
			DDRC_REG=0;
    133e:	e4 e3       	ldi	r30, 0x34	; 52
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	10 82       	st	Z, r1
    1344:	0e c0       	rjmp	.+28     	; 0x1362 <MDIO_voidSetPortDirection+0xc4>
			// invalid direction
		}
		break;
		
		case PORTD: 
		  if(copy_u8PortDirection  == OUTPUT)
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	29 f4       	brne	.+10     	; 0x1356 <MDIO_voidSetPortDirection+0xb8>
		{
		DDRD_REG=0xff;
    134c:	e1 e3       	ldi	r30, 0x31	; 49
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	8f ef       	ldi	r24, 0xFF	; 255
    1352:	80 83       	st	Z, r24
    1354:	06 c0       	rjmp	.+12     	; 0x1362 <MDIO_voidSetPortDirection+0xc4>
		}
		else if(copy_u8PortDirection  == INPUT){
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	88 23       	and	r24, r24
    135a:	19 f4       	brne	.+6      	; 0x1362 <MDIO_voidSetPortDirection+0xc4>
			DDRD_REG=0;
    135c:	e1 e3       	ldi	r30, 0x31	; 49
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	10 82       	st	Z, r1
		break;
	default:
		 /*INVALID PORT ID*/
		 break;
	}
}
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(u8 copy_u8PortId,u8 copy_u8PortValue)
{
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	00 d0       	rcall	.+0      	; 0x1376 <MDIO_voidSetPortValue+0x6>
    1376:	00 d0       	rcall	.+0      	; 0x1378 <MDIO_voidSetPortValue+0x8>
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
    137c:	89 83       	std	Y+1, r24	; 0x01
    137e:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8PortId)
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	3c 83       	std	Y+4, r19	; 0x04
    1388:	2b 83       	std	Y+3, r18	; 0x03
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	9c 81       	ldd	r25, Y+4	; 0x04
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	91 05       	cpc	r25, r1
    1392:	49 f1       	breq	.+82     	; 0x13e6 <MDIO_voidSetPortValue+0x76>
    1394:	2b 81       	ldd	r18, Y+3	; 0x03
    1396:	3c 81       	ldd	r19, Y+4	; 0x04
    1398:	22 30       	cpi	r18, 0x02	; 2
    139a:	31 05       	cpc	r19, r1
    139c:	2c f4       	brge	.+10     	; 0x13a8 <MDIO_voidSetPortValue+0x38>
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	9c 81       	ldd	r25, Y+4	; 0x04
    13a2:	00 97       	sbiw	r24, 0x00	; 0
    13a4:	61 f0       	breq	.+24     	; 0x13be <MDIO_voidSetPortValue+0x4e>
    13a6:	5a c0       	rjmp	.+180    	; 0x145c <MDIO_voidSetPortValue+0xec>
    13a8:	2b 81       	ldd	r18, Y+3	; 0x03
    13aa:	3c 81       	ldd	r19, Y+4	; 0x04
    13ac:	22 30       	cpi	r18, 0x02	; 2
    13ae:	31 05       	cpc	r19, r1
    13b0:	71 f1       	breq	.+92     	; 0x140e <MDIO_voidSetPortValue+0x9e>
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	9c 81       	ldd	r25, Y+4	; 0x04
    13b6:	83 30       	cpi	r24, 0x03	; 3
    13b8:	91 05       	cpc	r25, r1
    13ba:	e9 f1       	breq	.+122    	; 0x1436 <MDIO_voidSetPortValue+0xc6>
    13bc:	4f c0       	rjmp	.+158    	; 0x145c <MDIO_voidSetPortValue+0xec>
	{
		case PORTA:
		if(copy_u8PortValue== HIGH)
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	81 30       	cpi	r24, 0x01	; 1
    13c2:	29 f4       	brne	.+10     	; 0x13ce <MDIO_voidSetPortValue+0x5e>
		{
			PORTA_REG=0xff;
    13c4:	eb e3       	ldi	r30, 0x3B	; 59
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	8f ef       	ldi	r24, 0xFF	; 255
    13ca:	80 83       	st	Z, r24
    13cc:	47 c0       	rjmp	.+142    	; 0x145c <MDIO_voidSetPortValue+0xec>
		}
		else if(copy_u8PortValue== LOW){
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	88 23       	and	r24, r24
    13d2:	21 f4       	brne	.+8      	; 0x13dc <MDIO_voidSetPortValue+0x6c>
			PORTA_REG=0;
    13d4:	eb e3       	ldi	r30, 0x3B	; 59
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	10 82       	st	Z, r1
    13da:	40 c0       	rjmp	.+128    	; 0x145c <MDIO_voidSetPortValue+0xec>
		}
		else {
             PORTA_REG=copy_u8PortValue;
    13dc:	eb e3       	ldi	r30, 0x3B	; 59
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	80 83       	st	Z, r24
    13e4:	3b c0       	rjmp	.+118    	; 0x145c <MDIO_voidSetPortValue+0xec>
		}
		break;
		
	case PORTB:
		if(copy_u8PortValue== HIGH)
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	29 f4       	brne	.+10     	; 0x13f6 <MDIO_voidSetPortValue+0x86>
		{
			PORTB_REG=0xff;
    13ec:	e8 e3       	ldi	r30, 0x38	; 56
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	8f ef       	ldi	r24, 0xFF	; 255
    13f2:	80 83       	st	Z, r24
    13f4:	33 c0       	rjmp	.+102    	; 0x145c <MDIO_voidSetPortValue+0xec>
		}
		else if(copy_u8PortValue== LOW){
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	88 23       	and	r24, r24
    13fa:	21 f4       	brne	.+8      	; 0x1404 <MDIO_voidSetPortValue+0x94>
			PORTB_REG=0;
    13fc:	e8 e3       	ldi	r30, 0x38	; 56
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	10 82       	st	Z, r1
    1402:	2c c0       	rjmp	.+88     	; 0x145c <MDIO_voidSetPortValue+0xec>
		}
		else{
			PORTB_REG=copy_u8PortValue;
    1404:	e8 e3       	ldi	r30, 0x38	; 56
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	80 83       	st	Z, r24
    140c:	27 c0       	rjmp	.+78     	; 0x145c <MDIO_voidSetPortValue+0xec>
		}
		break;
		
	case PORTC:
		if(copy_u8PortValue== HIGH)
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	81 30       	cpi	r24, 0x01	; 1
    1412:	29 f4       	brne	.+10     	; 0x141e <MDIO_voidSetPortValue+0xae>
		{
			PORTC_REG=0xff;
    1414:	e5 e3       	ldi	r30, 0x35	; 53
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	8f ef       	ldi	r24, 0xFF	; 255
    141a:	80 83       	st	Z, r24
    141c:	1f c0       	rjmp	.+62     	; 0x145c <MDIO_voidSetPortValue+0xec>
		}
		else if(copy_u8PortValue== LOW){
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	88 23       	and	r24, r24
    1422:	21 f4       	brne	.+8      	; 0x142c <MDIO_voidSetPortValue+0xbc>
			PORTC_REG=0;
    1424:	e5 e3       	ldi	r30, 0x35	; 53
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	10 82       	st	Z, r1
    142a:	18 c0       	rjmp	.+48     	; 0x145c <MDIO_voidSetPortValue+0xec>
		}
		else{
			PORTC_REG=copy_u8PortValue;
    142c:	e5 e3       	ldi	r30, 0x35	; 53
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	80 83       	st	Z, r24
    1434:	13 c0       	rjmp	.+38     	; 0x145c <MDIO_voidSetPortValue+0xec>
		}
		break;
		
	case PORTD:
		if(copy_u8PortValue== HIGH)
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	81 30       	cpi	r24, 0x01	; 1
    143a:	29 f4       	brne	.+10     	; 0x1446 <MDIO_voidSetPortValue+0xd6>
		{
			PORTD_REG=0xff;
    143c:	e2 e3       	ldi	r30, 0x32	; 50
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	8f ef       	ldi	r24, 0xFF	; 255
    1442:	80 83       	st	Z, r24
    1444:	0b c0       	rjmp	.+22     	; 0x145c <MDIO_voidSetPortValue+0xec>
		}
		else if(copy_u8PortValue== LOW){
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	88 23       	and	r24, r24
    144a:	21 f4       	brne	.+8      	; 0x1454 <MDIO_voidSetPortValue+0xe4>
			PORTD_REG=0;
    144c:	e2 e3       	ldi	r30, 0x32	; 50
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	10 82       	st	Z, r1
    1452:	04 c0       	rjmp	.+8      	; 0x145c <MDIO_voidSetPortValue+0xec>
		}
		else{
			PORTD_REG=copy_u8PortValue;
    1454:	e2 e3       	ldi	r30, 0x32	; 50
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	80 83       	st	Z, r24
		break;
	default:
		 /*INVALID PORT ID*/
		 break;
	}
}
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <MDIO_voidInitPinDirection>:

 /* PIN FUNCTIONS IMPLEMENTATION*/
 
 void MDIO_voidInitPinDirection(u8 copy_u8PortId,u8 copy_u8PinId, u8 copy_u8PinDirection)
 {
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	00 d0       	rcall	.+0      	; 0x1470 <MDIO_voidInitPinDirection+0x6>
    1470:	00 d0       	rcall	.+0      	; 0x1472 <MDIO_voidInitPinDirection+0x8>
    1472:	0f 92       	push	r0
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
    1478:	89 83       	std	Y+1, r24	; 0x01
    147a:	6a 83       	std	Y+2, r22	; 0x02
    147c:	4b 83       	std	Y+3, r20	; 0x03
	 switch (copy_u8PortId)
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	3d 83       	std	Y+5, r19	; 0x05
    1486:	2c 83       	std	Y+4, r18	; 0x04
    1488:	8c 81       	ldd	r24, Y+4	; 0x04
    148a:	9d 81       	ldd	r25, Y+5	; 0x05
    148c:	81 30       	cpi	r24, 0x01	; 1
    148e:	91 05       	cpc	r25, r1
    1490:	09 f4       	brne	.+2      	; 0x1494 <MDIO_voidInitPinDirection+0x2a>
    1492:	4e c0       	rjmp	.+156    	; 0x1530 <MDIO_voidInitPinDirection+0xc6>
    1494:	2c 81       	ldd	r18, Y+4	; 0x04
    1496:	3d 81       	ldd	r19, Y+5	; 0x05
    1498:	22 30       	cpi	r18, 0x02	; 2
    149a:	31 05       	cpc	r19, r1
    149c:	2c f4       	brge	.+10     	; 0x14a8 <MDIO_voidInitPinDirection+0x3e>
    149e:	8c 81       	ldd	r24, Y+4	; 0x04
    14a0:	9d 81       	ldd	r25, Y+5	; 0x05
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	71 f0       	breq	.+28     	; 0x14c2 <MDIO_voidInitPinDirection+0x58>
    14a6:	e6 c0       	rjmp	.+460    	; 0x1674 <MDIO_voidInitPinDirection+0x20a>
    14a8:	2c 81       	ldd	r18, Y+4	; 0x04
    14aa:	3d 81       	ldd	r19, Y+5	; 0x05
    14ac:	22 30       	cpi	r18, 0x02	; 2
    14ae:	31 05       	cpc	r19, r1
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <MDIO_voidInitPinDirection+0x4a>
    14b2:	75 c0       	rjmp	.+234    	; 0x159e <MDIO_voidInitPinDirection+0x134>
    14b4:	8c 81       	ldd	r24, Y+4	; 0x04
    14b6:	9d 81       	ldd	r25, Y+5	; 0x05
    14b8:	83 30       	cpi	r24, 0x03	; 3
    14ba:	91 05       	cpc	r25, r1
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <MDIO_voidInitPinDirection+0x56>
    14be:	a6 c0       	rjmp	.+332    	; 0x160c <MDIO_voidInitPinDirection+0x1a2>
    14c0:	d9 c0       	rjmp	.+434    	; 0x1674 <MDIO_voidInitPinDirection+0x20a>
	 {
		 case PORTA:
		 if ((copy_u8PinDirection==OUTPUT) && (copy_u8PinId<=7)){
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	81 30       	cpi	r24, 0x01	; 1
    14c6:	b9 f4       	brne	.+46     	; 0x14f6 <MDIO_voidInitPinDirection+0x8c>
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	88 30       	cpi	r24, 0x08	; 8
    14cc:	a0 f4       	brcc	.+40     	; 0x14f6 <MDIO_voidInitPinDirection+0x8c>
			 SET_BIT(DDRA_REG,copy_u8PinId);
    14ce:	aa e3       	ldi	r26, 0x3A	; 58
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	ea e3       	ldi	r30, 0x3A	; 58
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	48 2f       	mov	r20, r24
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	02 2e       	mov	r0, r18
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <MDIO_voidInitPinDirection+0x82>
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	0a 94       	dec	r0
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <MDIO_voidInitPinDirection+0x7e>
    14f0:	84 2b       	or	r24, r20
    14f2:	8c 93       	st	X, r24
    14f4:	bf c0       	rjmp	.+382    	; 0x1674 <MDIO_voidInitPinDirection+0x20a>
		 }
		 else if((copy_u8PinDirection==INPUT )&& (copy_u8PinId<=7)){
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	88 23       	and	r24, r24
    14fa:	09 f0       	breq	.+2      	; 0x14fe <MDIO_voidInitPinDirection+0x94>
    14fc:	bb c0       	rjmp	.+374    	; 0x1674 <MDIO_voidInitPinDirection+0x20a>
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	88 30       	cpi	r24, 0x08	; 8
    1502:	08 f0       	brcs	.+2      	; 0x1506 <MDIO_voidInitPinDirection+0x9c>
    1504:	b7 c0       	rjmp	.+366    	; 0x1674 <MDIO_voidInitPinDirection+0x20a>
			 CLR_BIT(DDRA_REG,copy_u8PinId);
    1506:	aa e3       	ldi	r26, 0x3A	; 58
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	ea e3       	ldi	r30, 0x3A	; 58
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	48 2f       	mov	r20, r24
    1512:	8a 81       	ldd	r24, Y+2	; 0x02
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	02 2e       	mov	r0, r18
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <MDIO_voidInitPinDirection+0xba>
    1520:	88 0f       	add	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	0a 94       	dec	r0
    1526:	e2 f7       	brpl	.-8      	; 0x1520 <MDIO_voidInitPinDirection+0xb6>
    1528:	80 95       	com	r24
    152a:	84 23       	and	r24, r20
    152c:	8c 93       	st	X, r24
    152e:	a2 c0       	rjmp	.+324    	; 0x1674 <MDIO_voidInitPinDirection+0x20a>
			// invalid direction
		}
		 break;
		 
		 case PORTB:
		 if ((copy_u8PinDirection==OUTPUT) && (copy_u8PinId<=7)){
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	81 30       	cpi	r24, 0x01	; 1
    1534:	b9 f4       	brne	.+46     	; 0x1564 <MDIO_voidInitPinDirection+0xfa>
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	88 30       	cpi	r24, 0x08	; 8
    153a:	a0 f4       	brcc	.+40     	; 0x1564 <MDIO_voidInitPinDirection+0xfa>
			 SET_BIT(DDRA_REG,copy_u8PinId);
    153c:	aa e3       	ldi	r26, 0x3A	; 58
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	ea e3       	ldi	r30, 0x3A	; 58
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	48 2f       	mov	r20, r24
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	28 2f       	mov	r18, r24
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	02 2e       	mov	r0, r18
    1554:	02 c0       	rjmp	.+4      	; 0x155a <MDIO_voidInitPinDirection+0xf0>
    1556:	88 0f       	add	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	0a 94       	dec	r0
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <MDIO_voidInitPinDirection+0xec>
    155e:	84 2b       	or	r24, r20
    1560:	8c 93       	st	X, r24
    1562:	88 c0       	rjmp	.+272    	; 0x1674 <MDIO_voidInitPinDirection+0x20a>
		 }
		 else if((copy_u8PinDirection== INPUT )&& (copy_u8PinId<=7)){
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	88 23       	and	r24, r24
    1568:	09 f0       	breq	.+2      	; 0x156c <MDIO_voidInitPinDirection+0x102>
    156a:	84 c0       	rjmp	.+264    	; 0x1674 <MDIO_voidInitPinDirection+0x20a>
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	88 30       	cpi	r24, 0x08	; 8
    1570:	08 f0       	brcs	.+2      	; 0x1574 <MDIO_voidInitPinDirection+0x10a>
    1572:	80 c0       	rjmp	.+256    	; 0x1674 <MDIO_voidInitPinDirection+0x20a>
			 CLR_BIT(DDRB_REG,copy_u8PinId);
    1574:	a7 e3       	ldi	r26, 0x37	; 55
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e7 e3       	ldi	r30, 0x37	; 55
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	48 2f       	mov	r20, r24
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	02 2e       	mov	r0, r18
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <MDIO_voidInitPinDirection+0x128>
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	0a 94       	dec	r0
    1594:	e2 f7       	brpl	.-8      	; 0x158e <MDIO_voidInitPinDirection+0x124>
    1596:	80 95       	com	r24
    1598:	84 23       	and	r24, r20
    159a:	8c 93       	st	X, r24
    159c:	6b c0       	rjmp	.+214    	; 0x1674 <MDIO_voidInitPinDirection+0x20a>
			// invalid direction
		}
		 break;
		 
		 case PORTC:
		 if ((copy_u8PinDirection== OUTPUT) && (copy_u8PinId<=7)){
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	81 30       	cpi	r24, 0x01	; 1
    15a2:	b9 f4       	brne	.+46     	; 0x15d2 <MDIO_voidInitPinDirection+0x168>
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	88 30       	cpi	r24, 0x08	; 8
    15a8:	a0 f4       	brcc	.+40     	; 0x15d2 <MDIO_voidInitPinDirection+0x168>
			 SET_BIT(DDRC_REG,copy_u8PinId);
    15aa:	a4 e3       	ldi	r26, 0x34	; 52
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e4 e3       	ldi	r30, 0x34	; 52
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	48 2f       	mov	r20, r24
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	02 2e       	mov	r0, r18
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <MDIO_voidInitPinDirection+0x15e>
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	0a 94       	dec	r0
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <MDIO_voidInitPinDirection+0x15a>
    15cc:	84 2b       	or	r24, r20
    15ce:	8c 93       	st	X, r24
    15d0:	51 c0       	rjmp	.+162    	; 0x1674 <MDIO_voidInitPinDirection+0x20a>
		 }
		 else if((copy_u8PinDirection== INPUT )&& (copy_u8PinId<=7)){
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	88 23       	and	r24, r24
    15d6:	09 f0       	breq	.+2      	; 0x15da <MDIO_voidInitPinDirection+0x170>
    15d8:	4d c0       	rjmp	.+154    	; 0x1674 <MDIO_voidInitPinDirection+0x20a>
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	88 30       	cpi	r24, 0x08	; 8
    15de:	08 f0       	brcs	.+2      	; 0x15e2 <MDIO_voidInitPinDirection+0x178>
    15e0:	49 c0       	rjmp	.+146    	; 0x1674 <MDIO_voidInitPinDirection+0x20a>
			 CLR_BIT(DDRC_REG,copy_u8PinId);
    15e2:	a4 e3       	ldi	r26, 0x34	; 52
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e4 e3       	ldi	r30, 0x34	; 52
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	48 2f       	mov	r20, r24
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	02 2e       	mov	r0, r18
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <MDIO_voidInitPinDirection+0x196>
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	0a 94       	dec	r0
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <MDIO_voidInitPinDirection+0x192>
    1604:	80 95       	com	r24
    1606:	84 23       	and	r24, r20
    1608:	8c 93       	st	X, r24
    160a:	34 c0       	rjmp	.+104    	; 0x1674 <MDIO_voidInitPinDirection+0x20a>
			// invalid direction
		}
		 break;
		 
		 case PORTD:
		 if ((copy_u8PinDirection== OUTPUT) && (copy_u8PinId<=7)){
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	81 30       	cpi	r24, 0x01	; 1
    1610:	b9 f4       	brne	.+46     	; 0x1640 <MDIO_voidInitPinDirection+0x1d6>
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	88 30       	cpi	r24, 0x08	; 8
    1616:	a0 f4       	brcc	.+40     	; 0x1640 <MDIO_voidInitPinDirection+0x1d6>
			 SET_BIT(DDRD_REG,copy_u8PinId);
    1618:	a1 e3       	ldi	r26, 0x31	; 49
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	e1 e3       	ldi	r30, 0x31	; 49
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	48 2f       	mov	r20, r24
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	02 2e       	mov	r0, r18
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <MDIO_voidInitPinDirection+0x1cc>
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	0a 94       	dec	r0
    1638:	e2 f7       	brpl	.-8      	; 0x1632 <MDIO_voidInitPinDirection+0x1c8>
    163a:	84 2b       	or	r24, r20
    163c:	8c 93       	st	X, r24
    163e:	1a c0       	rjmp	.+52     	; 0x1674 <MDIO_voidInitPinDirection+0x20a>
		 }
		 else if((copy_u8PinDirection== INPUT )&& (copy_u8PinId<=7)){
    1640:	8b 81       	ldd	r24, Y+3	; 0x03
    1642:	88 23       	and	r24, r24
    1644:	b9 f4       	brne	.+46     	; 0x1674 <MDIO_voidInitPinDirection+0x20a>
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	88 30       	cpi	r24, 0x08	; 8
    164a:	a0 f4       	brcc	.+40     	; 0x1674 <MDIO_voidInitPinDirection+0x20a>
			 CLR_BIT(DDRD_REG,copy_u8PinId);
    164c:	a1 e3       	ldi	r26, 0x31	; 49
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e1 e3       	ldi	r30, 0x31	; 49
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	48 2f       	mov	r20, r24
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	02 2e       	mov	r0, r18
    1664:	02 c0       	rjmp	.+4      	; 0x166a <MDIO_voidInitPinDirection+0x200>
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	0a 94       	dec	r0
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <MDIO_voidInitPinDirection+0x1fc>
    166e:	80 95       	com	r24
    1670:	84 23       	and	r24, r20
    1672:	8c 93       	st	X, r24
		 default:
		 /*INVALID PORT ID*/
		 break;
	 }
	 
 }
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	cf 91       	pop	r28
    1680:	df 91       	pop	r29
    1682:	08 95       	ret

00001684 <MDIO_voidWritePinValue>:
 
 void MDIO_voidWritePinValue(u8 copy_u8PortId,u8 copy_u8PinId, u8 copy_u8PinValue)
 {
    1684:	df 93       	push	r29
    1686:	cf 93       	push	r28
    1688:	00 d0       	rcall	.+0      	; 0x168a <MDIO_voidWritePinValue+0x6>
    168a:	00 d0       	rcall	.+0      	; 0x168c <MDIO_voidWritePinValue+0x8>
    168c:	0f 92       	push	r0
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	6a 83       	std	Y+2, r22	; 0x02
    1696:	4b 83       	std	Y+3, r20	; 0x03
	 	 switch (copy_u8PortId)
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	3d 83       	std	Y+5, r19	; 0x05
    16a0:	2c 83       	std	Y+4, r18	; 0x04
    16a2:	8c 81       	ldd	r24, Y+4	; 0x04
    16a4:	9d 81       	ldd	r25, Y+5	; 0x05
    16a6:	81 30       	cpi	r24, 0x01	; 1
    16a8:	91 05       	cpc	r25, r1
    16aa:	09 f4       	brne	.+2      	; 0x16ae <MDIO_voidWritePinValue+0x2a>
    16ac:	4e c0       	rjmp	.+156    	; 0x174a <MDIO_voidWritePinValue+0xc6>
    16ae:	2c 81       	ldd	r18, Y+4	; 0x04
    16b0:	3d 81       	ldd	r19, Y+5	; 0x05
    16b2:	22 30       	cpi	r18, 0x02	; 2
    16b4:	31 05       	cpc	r19, r1
    16b6:	2c f4       	brge	.+10     	; 0x16c2 <MDIO_voidWritePinValue+0x3e>
    16b8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ba:	9d 81       	ldd	r25, Y+5	; 0x05
    16bc:	00 97       	sbiw	r24, 0x00	; 0
    16be:	71 f0       	breq	.+28     	; 0x16dc <MDIO_voidWritePinValue+0x58>
    16c0:	e6 c0       	rjmp	.+460    	; 0x188e <MDIO_voidWritePinValue+0x20a>
    16c2:	2c 81       	ldd	r18, Y+4	; 0x04
    16c4:	3d 81       	ldd	r19, Y+5	; 0x05
    16c6:	22 30       	cpi	r18, 0x02	; 2
    16c8:	31 05       	cpc	r19, r1
    16ca:	09 f4       	brne	.+2      	; 0x16ce <MDIO_voidWritePinValue+0x4a>
    16cc:	75 c0       	rjmp	.+234    	; 0x17b8 <MDIO_voidWritePinValue+0x134>
    16ce:	8c 81       	ldd	r24, Y+4	; 0x04
    16d0:	9d 81       	ldd	r25, Y+5	; 0x05
    16d2:	83 30       	cpi	r24, 0x03	; 3
    16d4:	91 05       	cpc	r25, r1
    16d6:	09 f4       	brne	.+2      	; 0x16da <MDIO_voidWritePinValue+0x56>
    16d8:	a6 c0       	rjmp	.+332    	; 0x1826 <MDIO_voidWritePinValue+0x1a2>
    16da:	d9 c0       	rjmp	.+434    	; 0x188e <MDIO_voidWritePinValue+0x20a>
	 {
		 case PORTA:
		 if ((copy_u8PinValue==HIGH) && (copy_u8PinId<=7)){
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	81 30       	cpi	r24, 0x01	; 1
    16e0:	b9 f4       	brne	.+46     	; 0x1710 <MDIO_voidWritePinValue+0x8c>
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	88 30       	cpi	r24, 0x08	; 8
    16e6:	a0 f4       	brcc	.+40     	; 0x1710 <MDIO_voidWritePinValue+0x8c>
			 SET_BIT(PORTA_REG,copy_u8PinId);
    16e8:	ab e3       	ldi	r26, 0x3B	; 59
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	eb e3       	ldi	r30, 0x3B	; 59
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	48 2f       	mov	r20, r24
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	02 2e       	mov	r0, r18
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <MDIO_voidWritePinValue+0x82>
    1702:	88 0f       	add	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	0a 94       	dec	r0
    1708:	e2 f7       	brpl	.-8      	; 0x1702 <MDIO_voidWritePinValue+0x7e>
    170a:	84 2b       	or	r24, r20
    170c:	8c 93       	st	X, r24
    170e:	bf c0       	rjmp	.+382    	; 0x188e <MDIO_voidWritePinValue+0x20a>
		 }
		 else if((copy_u8PinValue==LOW )&& (copy_u8PinId<=7)){
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	88 23       	and	r24, r24
    1714:	09 f0       	breq	.+2      	; 0x1718 <MDIO_voidWritePinValue+0x94>
    1716:	bb c0       	rjmp	.+374    	; 0x188e <MDIO_voidWritePinValue+0x20a>
    1718:	8a 81       	ldd	r24, Y+2	; 0x02
    171a:	88 30       	cpi	r24, 0x08	; 8
    171c:	08 f0       	brcs	.+2      	; 0x1720 <MDIO_voidWritePinValue+0x9c>
    171e:	b7 c0       	rjmp	.+366    	; 0x188e <MDIO_voidWritePinValue+0x20a>
			 CLR_BIT(PORTA_REG,copy_u8PinId);
    1720:	ab e3       	ldi	r26, 0x3B	; 59
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	eb e3       	ldi	r30, 0x3B	; 59
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	48 2f       	mov	r20, r24
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	02 2e       	mov	r0, r18
    1738:	02 c0       	rjmp	.+4      	; 0x173e <MDIO_voidWritePinValue+0xba>
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	0a 94       	dec	r0
    1740:	e2 f7       	brpl	.-8      	; 0x173a <MDIO_voidWritePinValue+0xb6>
    1742:	80 95       	com	r24
    1744:	84 23       	and	r24, r20
    1746:	8c 93       	st	X, r24
    1748:	a2 c0       	rjmp	.+324    	; 0x188e <MDIO_voidWritePinValue+0x20a>
			// invalid direction
		}
		 break;
		 
		 case PORTB:
		 if ((copy_u8PinValue==HIGH) && (copy_u8PinId<=7)){
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	81 30       	cpi	r24, 0x01	; 1
    174e:	b9 f4       	brne	.+46     	; 0x177e <MDIO_voidWritePinValue+0xfa>
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	88 30       	cpi	r24, 0x08	; 8
    1754:	a0 f4       	brcc	.+40     	; 0x177e <MDIO_voidWritePinValue+0xfa>
			 SET_BIT(PORTB_REG,copy_u8PinId);
    1756:	a8 e3       	ldi	r26, 0x38	; 56
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e8 e3       	ldi	r30, 0x38	; 56
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	48 2f       	mov	r20, r24
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	28 2f       	mov	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	02 2e       	mov	r0, r18
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <MDIO_voidWritePinValue+0xf0>
    1770:	88 0f       	add	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	0a 94       	dec	r0
    1776:	e2 f7       	brpl	.-8      	; 0x1770 <MDIO_voidWritePinValue+0xec>
    1778:	84 2b       	or	r24, r20
    177a:	8c 93       	st	X, r24
    177c:	88 c0       	rjmp	.+272    	; 0x188e <MDIO_voidWritePinValue+0x20a>
		 }
		 else if((copy_u8PinValue==LOW )&& (copy_u8PinId<=7)){
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	88 23       	and	r24, r24
    1782:	09 f0       	breq	.+2      	; 0x1786 <MDIO_voidWritePinValue+0x102>
    1784:	84 c0       	rjmp	.+264    	; 0x188e <MDIO_voidWritePinValue+0x20a>
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	88 30       	cpi	r24, 0x08	; 8
    178a:	08 f0       	brcs	.+2      	; 0x178e <MDIO_voidWritePinValue+0x10a>
    178c:	80 c0       	rjmp	.+256    	; 0x188e <MDIO_voidWritePinValue+0x20a>
			 CLR_BIT(PORTB_REG,copy_u8PinId);
    178e:	a8 e3       	ldi	r26, 0x38	; 56
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	e8 e3       	ldi	r30, 0x38	; 56
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	48 2f       	mov	r20, r24
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	28 2f       	mov	r18, r24
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	02 2e       	mov	r0, r18
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <MDIO_voidWritePinValue+0x128>
    17a8:	88 0f       	add	r24, r24
    17aa:	99 1f       	adc	r25, r25
    17ac:	0a 94       	dec	r0
    17ae:	e2 f7       	brpl	.-8      	; 0x17a8 <MDIO_voidWritePinValue+0x124>
    17b0:	80 95       	com	r24
    17b2:	84 23       	and	r24, r20
    17b4:	8c 93       	st	X, r24
    17b6:	6b c0       	rjmp	.+214    	; 0x188e <MDIO_voidWritePinValue+0x20a>
			// invalid direction
		}
		 break;
		 
		 case PORTC:
		 if ((copy_u8PinValue==HIGH) && (copy_u8PinId<=7)){
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	81 30       	cpi	r24, 0x01	; 1
    17bc:	b9 f4       	brne	.+46     	; 0x17ec <MDIO_voidWritePinValue+0x168>
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	88 30       	cpi	r24, 0x08	; 8
    17c2:	a0 f4       	brcc	.+40     	; 0x17ec <MDIO_voidWritePinValue+0x168>
			 SET_BIT(PORTC_REG,copy_u8PinId);
    17c4:	a5 e3       	ldi	r26, 0x35	; 53
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e5 e3       	ldi	r30, 0x35	; 53
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	48 2f       	mov	r20, r24
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	02 2e       	mov	r0, r18
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <MDIO_voidWritePinValue+0x15e>
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	0a 94       	dec	r0
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <MDIO_voidWritePinValue+0x15a>
    17e6:	84 2b       	or	r24, r20
    17e8:	8c 93       	st	X, r24
    17ea:	51 c0       	rjmp	.+162    	; 0x188e <MDIO_voidWritePinValue+0x20a>
		 }
		 else if((copy_u8PinValue==LOW )&& (copy_u8PinId<=7)){
    17ec:	8b 81       	ldd	r24, Y+3	; 0x03
    17ee:	88 23       	and	r24, r24
    17f0:	09 f0       	breq	.+2      	; 0x17f4 <MDIO_voidWritePinValue+0x170>
    17f2:	4d c0       	rjmp	.+154    	; 0x188e <MDIO_voidWritePinValue+0x20a>
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	88 30       	cpi	r24, 0x08	; 8
    17f8:	08 f0       	brcs	.+2      	; 0x17fc <MDIO_voidWritePinValue+0x178>
    17fa:	49 c0       	rjmp	.+146    	; 0x188e <MDIO_voidWritePinValue+0x20a>
			 CLR_BIT(PORTC_REG,copy_u8PinId);
    17fc:	a5 e3       	ldi	r26, 0x35	; 53
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	e5 e3       	ldi	r30, 0x35	; 53
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	48 2f       	mov	r20, r24
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	02 2e       	mov	r0, r18
    1814:	02 c0       	rjmp	.+4      	; 0x181a <MDIO_voidWritePinValue+0x196>
    1816:	88 0f       	add	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	0a 94       	dec	r0
    181c:	e2 f7       	brpl	.-8      	; 0x1816 <MDIO_voidWritePinValue+0x192>
    181e:	80 95       	com	r24
    1820:	84 23       	and	r24, r20
    1822:	8c 93       	st	X, r24
    1824:	34 c0       	rjmp	.+104    	; 0x188e <MDIO_voidWritePinValue+0x20a>
			// invalid direction
		}
		 break;
		 
		 case PORTD:
		 if ((copy_u8PinValue==HIGH) && (copy_u8PinId<=7)){
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	81 30       	cpi	r24, 0x01	; 1
    182a:	b9 f4       	brne	.+46     	; 0x185a <MDIO_voidWritePinValue+0x1d6>
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	88 30       	cpi	r24, 0x08	; 8
    1830:	a0 f4       	brcc	.+40     	; 0x185a <MDIO_voidWritePinValue+0x1d6>
			 SET_BIT(PORTD_REG,copy_u8PinId);
    1832:	a2 e3       	ldi	r26, 0x32	; 50
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	e2 e3       	ldi	r30, 0x32	; 50
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	48 2f       	mov	r20, r24
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	02 2e       	mov	r0, r18
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <MDIO_voidWritePinValue+0x1cc>
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	0a 94       	dec	r0
    1852:	e2 f7       	brpl	.-8      	; 0x184c <MDIO_voidWritePinValue+0x1c8>
    1854:	84 2b       	or	r24, r20
    1856:	8c 93       	st	X, r24
    1858:	1a c0       	rjmp	.+52     	; 0x188e <MDIO_voidWritePinValue+0x20a>
		 }
		 else if((copy_u8PinValue==LOW )&& (copy_u8PinId<=7)){
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	88 23       	and	r24, r24
    185e:	b9 f4       	brne	.+46     	; 0x188e <MDIO_voidWritePinValue+0x20a>
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	88 30       	cpi	r24, 0x08	; 8
    1864:	a0 f4       	brcc	.+40     	; 0x188e <MDIO_voidWritePinValue+0x20a>
			 CLR_BIT(PORTD_REG,copy_u8PinId);
    1866:	a2 e3       	ldi	r26, 0x32	; 50
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e2 e3       	ldi	r30, 0x32	; 50
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	48 2f       	mov	r20, r24
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	02 2e       	mov	r0, r18
    187e:	02 c0       	rjmp	.+4      	; 0x1884 <MDIO_voidWritePinValue+0x200>
    1880:	88 0f       	add	r24, r24
    1882:	99 1f       	adc	r25, r25
    1884:	0a 94       	dec	r0
    1886:	e2 f7       	brpl	.-8      	; 0x1880 <MDIO_voidWritePinValue+0x1fc>
    1888:	80 95       	com	r24
    188a:	84 23       	and	r24, r20
    188c:	8c 93       	st	X, r24
		 break;
		 default:
		 /*INVALID PORT ID*/
		 break;
	 }
 }
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <MDIO_voidTogglePinValue>:
 
 void MDIO_voidTogglePinValue(u8 copy_u8PortId,u8 copy_u8PinId)
 {
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	00 d0       	rcall	.+0      	; 0x18a4 <MDIO_voidTogglePinValue+0x6>
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <MDIO_voidTogglePinValue+0x8>
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
    18aa:	89 83       	std	Y+1, r24	; 0x01
    18ac:	6a 83       	std	Y+2, r22	; 0x02
	  switch (copy_u8PortId)
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	3c 83       	std	Y+4, r19	; 0x04
    18b6:	2b 83       	std	Y+3, r18	; 0x03
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	9c 81       	ldd	r25, Y+4	; 0x04
    18bc:	81 30       	cpi	r24, 0x01	; 1
    18be:	91 05       	cpc	r25, r1
    18c0:	71 f1       	breq	.+92     	; 0x191e <MDIO_voidTogglePinValue+0x80>
    18c2:	2b 81       	ldd	r18, Y+3	; 0x03
    18c4:	3c 81       	ldd	r19, Y+4	; 0x04
    18c6:	22 30       	cpi	r18, 0x02	; 2
    18c8:	31 05       	cpc	r19, r1
    18ca:	2c f4       	brge	.+10     	; 0x18d6 <MDIO_voidTogglePinValue+0x38>
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	9c 81       	ldd	r25, Y+4	; 0x04
    18d0:	00 97       	sbiw	r24, 0x00	; 0
    18d2:	69 f0       	breq	.+26     	; 0x18ee <MDIO_voidTogglePinValue+0x50>
    18d4:	69 c0       	rjmp	.+210    	; 0x19a8 <MDIO_voidTogglePinValue+0x10a>
    18d6:	2b 81       	ldd	r18, Y+3	; 0x03
    18d8:	3c 81       	ldd	r19, Y+4	; 0x04
    18da:	22 30       	cpi	r18, 0x02	; 2
    18dc:	31 05       	cpc	r19, r1
    18de:	b9 f1       	breq	.+110    	; 0x194e <MDIO_voidTogglePinValue+0xb0>
    18e0:	8b 81       	ldd	r24, Y+3	; 0x03
    18e2:	9c 81       	ldd	r25, Y+4	; 0x04
    18e4:	83 30       	cpi	r24, 0x03	; 3
    18e6:	91 05       	cpc	r25, r1
    18e8:	09 f4       	brne	.+2      	; 0x18ec <MDIO_voidTogglePinValue+0x4e>
    18ea:	48 c0       	rjmp	.+144    	; 0x197c <MDIO_voidTogglePinValue+0xde>
    18ec:	5d c0       	rjmp	.+186    	; 0x19a8 <MDIO_voidTogglePinValue+0x10a>
	 {
		 case PORTA:
		 if  (copy_u8PinId<=7){
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	88 30       	cpi	r24, 0x08	; 8
    18f2:	08 f0       	brcs	.+2      	; 0x18f6 <MDIO_voidTogglePinValue+0x58>
    18f4:	59 c0       	rjmp	.+178    	; 0x19a8 <MDIO_voidTogglePinValue+0x10a>
			 TOG_BIT(PORTA_REG,copy_u8PinId);
    18f6:	ab e3       	ldi	r26, 0x3B	; 59
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	eb e3       	ldi	r30, 0x3B	; 59
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	48 2f       	mov	r20, r24
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	28 2f       	mov	r18, r24
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	02 2e       	mov	r0, r18
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <MDIO_voidTogglePinValue+0x76>
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	0a 94       	dec	r0
    1916:	e2 f7       	brpl	.-8      	; 0x1910 <MDIO_voidTogglePinValue+0x72>
    1918:	84 27       	eor	r24, r20
    191a:	8c 93       	st	X, r24
    191c:	45 c0       	rjmp	.+138    	; 0x19a8 <MDIO_voidTogglePinValue+0x10a>
			// invalid direction
		}
		 break;
		 
		 case PORTB:
		 if  (copy_u8PinId<=7){
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	88 30       	cpi	r24, 0x08	; 8
    1922:	08 f0       	brcs	.+2      	; 0x1926 <MDIO_voidTogglePinValue+0x88>
    1924:	41 c0       	rjmp	.+130    	; 0x19a8 <MDIO_voidTogglePinValue+0x10a>
			 TOG_BIT(PORTB_REG,copy_u8PinId);
    1926:	a8 e3       	ldi	r26, 0x38	; 56
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	e8 e3       	ldi	r30, 0x38	; 56
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	48 2f       	mov	r20, r24
    1932:	8a 81       	ldd	r24, Y+2	; 0x02
    1934:	28 2f       	mov	r18, r24
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	02 2e       	mov	r0, r18
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <MDIO_voidTogglePinValue+0xa6>
    1940:	88 0f       	add	r24, r24
    1942:	99 1f       	adc	r25, r25
    1944:	0a 94       	dec	r0
    1946:	e2 f7       	brpl	.-8      	; 0x1940 <MDIO_voidTogglePinValue+0xa2>
    1948:	84 27       	eor	r24, r20
    194a:	8c 93       	st	X, r24
    194c:	2d c0       	rjmp	.+90     	; 0x19a8 <MDIO_voidTogglePinValue+0x10a>
			// invalid direction
		}
		 break;
		 
		 case PORTC:
		if  (copy_u8PinId<=7){
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	88 30       	cpi	r24, 0x08	; 8
    1952:	50 f5       	brcc	.+84     	; 0x19a8 <MDIO_voidTogglePinValue+0x10a>
			 TOG_BIT(PORTC_REG,copy_u8PinId);
    1954:	a5 e3       	ldi	r26, 0x35	; 53
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	e5 e3       	ldi	r30, 0x35	; 53
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	48 2f       	mov	r20, r24
    1960:	8a 81       	ldd	r24, Y+2	; 0x02
    1962:	28 2f       	mov	r18, r24
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	02 2e       	mov	r0, r18
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <MDIO_voidTogglePinValue+0xd4>
    196e:	88 0f       	add	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	0a 94       	dec	r0
    1974:	e2 f7       	brpl	.-8      	; 0x196e <MDIO_voidTogglePinValue+0xd0>
    1976:	84 27       	eor	r24, r20
    1978:	8c 93       	st	X, r24
    197a:	16 c0       	rjmp	.+44     	; 0x19a8 <MDIO_voidTogglePinValue+0x10a>
			// invalid direction
		}
		 break;
		 
		 case PORTD:
		if  (copy_u8PinId<=7){
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	88 30       	cpi	r24, 0x08	; 8
    1980:	98 f4       	brcc	.+38     	; 0x19a8 <MDIO_voidTogglePinValue+0x10a>
			 TOG_BIT(PORTD_REG,copy_u8PinId);
    1982:	a2 e3       	ldi	r26, 0x32	; 50
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e2 e3       	ldi	r30, 0x32	; 50
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	48 2f       	mov	r20, r24
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	28 2f       	mov	r18, r24
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	02 2e       	mov	r0, r18
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <MDIO_voidTogglePinValue+0x102>
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	0a 94       	dec	r0
    19a2:	e2 f7       	brpl	.-8      	; 0x199c <MDIO_voidTogglePinValue+0xfe>
    19a4:	84 27       	eor	r24, r20
    19a6:	8c 93       	st	X, r24
		break;
		 default:
		 /*INVALID PORT ID*/
		 break;
	 }
 }
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	cf 91       	pop	r28
    19b2:	df 91       	pop	r29
    19b4:	08 95       	ret

000019b6 <MDIO_voidReadPinValue>:
     
 
 

void MDIO_voidReadPinValue(u8 copy_u8PortId,u8 copy_u8PinId, u8 *ptr_u8value)
 {
    19b6:	df 93       	push	r29
    19b8:	cf 93       	push	r28
    19ba:	00 d0       	rcall	.+0      	; 0x19bc <MDIO_voidReadPinValue+0x6>
    19bc:	00 d0       	rcall	.+0      	; 0x19be <MDIO_voidReadPinValue+0x8>
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <MDIO_voidReadPinValue+0xa>
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	89 83       	std	Y+1, r24	; 0x01
    19c6:	6a 83       	std	Y+2, r22	; 0x02
    19c8:	5c 83       	std	Y+4, r21	; 0x04
    19ca:	4b 83       	std	Y+3, r20	; 0x03
 	switch (copy_u8PortId)
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	28 2f       	mov	r18, r24
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	3e 83       	std	Y+6, r19	; 0x06
    19d4:	2d 83       	std	Y+5, r18	; 0x05
    19d6:	4d 81       	ldd	r20, Y+5	; 0x05
    19d8:	5e 81       	ldd	r21, Y+6	; 0x06
    19da:	41 30       	cpi	r20, 0x01	; 1
    19dc:	51 05       	cpc	r21, r1
    19de:	79 f1       	breq	.+94     	; 0x1a3e <MDIO_voidReadPinValue+0x88>
    19e0:	8d 81       	ldd	r24, Y+5	; 0x05
    19e2:	9e 81       	ldd	r25, Y+6	; 0x06
    19e4:	82 30       	cpi	r24, 0x02	; 2
    19e6:	91 05       	cpc	r25, r1
    19e8:	34 f4       	brge	.+12     	; 0x19f6 <MDIO_voidReadPinValue+0x40>
    19ea:	2d 81       	ldd	r18, Y+5	; 0x05
    19ec:	3e 81       	ldd	r19, Y+6	; 0x06
    19ee:	21 15       	cp	r18, r1
    19f0:	31 05       	cpc	r19, r1
    19f2:	69 f0       	breq	.+26     	; 0x1a0e <MDIO_voidReadPinValue+0x58>
    19f4:	69 c0       	rjmp	.+210    	; 0x1ac8 <MDIO_voidReadPinValue+0x112>
    19f6:	4d 81       	ldd	r20, Y+5	; 0x05
    19f8:	5e 81       	ldd	r21, Y+6	; 0x06
    19fa:	42 30       	cpi	r20, 0x02	; 2
    19fc:	51 05       	cpc	r21, r1
    19fe:	b9 f1       	breq	.+110    	; 0x1a6e <MDIO_voidReadPinValue+0xb8>
    1a00:	8d 81       	ldd	r24, Y+5	; 0x05
    1a02:	9e 81       	ldd	r25, Y+6	; 0x06
    1a04:	83 30       	cpi	r24, 0x03	; 3
    1a06:	91 05       	cpc	r25, r1
    1a08:	09 f4       	brne	.+2      	; 0x1a0c <MDIO_voidReadPinValue+0x56>
    1a0a:	48 c0       	rjmp	.+144    	; 0x1a9c <MDIO_voidReadPinValue+0xe6>
    1a0c:	5d c0       	rjmp	.+186    	; 0x1ac8 <MDIO_voidReadPinValue+0x112>
 	{
 	case PORTA:
 		if  (copy_u8PinId<=7){
    1a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a10:	88 30       	cpi	r24, 0x08	; 8
    1a12:	08 f0       	brcs	.+2      	; 0x1a16 <MDIO_voidReadPinValue+0x60>
    1a14:	59 c0       	rjmp	.+178    	; 0x1ac8 <MDIO_voidReadPinValue+0x112>
 			*ptr_u8value=GET_BIT(PINA_REG,copy_u8PinId);
    1a16:	e9 e3       	ldi	r30, 0x39	; 57
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	28 2f       	mov	r18, r24
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	88 2f       	mov	r24, r24
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	a9 01       	movw	r20, r18
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <MDIO_voidReadPinValue+0x78>
    1a2a:	55 95       	asr	r21
    1a2c:	47 95       	ror	r20
    1a2e:	8a 95       	dec	r24
    1a30:	e2 f7       	brpl	.-8      	; 0x1a2a <MDIO_voidReadPinValue+0x74>
    1a32:	ca 01       	movw	r24, r20
    1a34:	81 70       	andi	r24, 0x01	; 1
    1a36:	eb 81       	ldd	r30, Y+3	; 0x03
    1a38:	fc 81       	ldd	r31, Y+4	; 0x04
    1a3a:	80 83       	st	Z, r24
    1a3c:	45 c0       	rjmp	.+138    	; 0x1ac8 <MDIO_voidReadPinValue+0x112>
 		}

 		break;

 	case PORTB:
 		if  (copy_u8PinId<=7){
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	88 30       	cpi	r24, 0x08	; 8
    1a42:	08 f0       	brcs	.+2      	; 0x1a46 <MDIO_voidReadPinValue+0x90>
    1a44:	41 c0       	rjmp	.+130    	; 0x1ac8 <MDIO_voidReadPinValue+0x112>
 			*ptr_u8value=GET_BIT(PINB_REG,copy_u8PinId);
    1a46:	e6 e3       	ldi	r30, 0x36	; 54
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	88 2f       	mov	r24, r24
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	a9 01       	movw	r20, r18
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <MDIO_voidReadPinValue+0xa8>
    1a5a:	55 95       	asr	r21
    1a5c:	47 95       	ror	r20
    1a5e:	8a 95       	dec	r24
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <MDIO_voidReadPinValue+0xa4>
    1a62:	ca 01       	movw	r24, r20
    1a64:	81 70       	andi	r24, 0x01	; 1
    1a66:	eb 81       	ldd	r30, Y+3	; 0x03
    1a68:	fc 81       	ldd	r31, Y+4	; 0x04
    1a6a:	80 83       	st	Z, r24
    1a6c:	2d c0       	rjmp	.+90     	; 0x1ac8 <MDIO_voidReadPinValue+0x112>
 			// invalid direction
 		}
 		break;

 	case PORTC:
 		if  (copy_u8PinId<=7){
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	88 30       	cpi	r24, 0x08	; 8
    1a72:	50 f5       	brcc	.+84     	; 0x1ac8 <MDIO_voidReadPinValue+0x112>
 			*ptr_u8value=GET_BIT(PINC_REG,copy_u8PinId);
    1a74:	e3 e3       	ldi	r30, 0x33	; 51
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	28 2f       	mov	r18, r24
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a80:	88 2f       	mov	r24, r24
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	a9 01       	movw	r20, r18
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <MDIO_voidReadPinValue+0xd6>
    1a88:	55 95       	asr	r21
    1a8a:	47 95       	ror	r20
    1a8c:	8a 95       	dec	r24
    1a8e:	e2 f7       	brpl	.-8      	; 0x1a88 <MDIO_voidReadPinValue+0xd2>
    1a90:	ca 01       	movw	r24, r20
    1a92:	81 70       	andi	r24, 0x01	; 1
    1a94:	eb 81       	ldd	r30, Y+3	; 0x03
    1a96:	fc 81       	ldd	r31, Y+4	; 0x04
    1a98:	80 83       	st	Z, r24
    1a9a:	16 c0       	rjmp	.+44     	; 0x1ac8 <MDIO_voidReadPinValue+0x112>
 			// invalid direction
 		}
 		break;

 	case PORTD:
 		if  (copy_u8PinId<=7){
    1a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9e:	88 30       	cpi	r24, 0x08	; 8
    1aa0:	98 f4       	brcc	.+38     	; 0x1ac8 <MDIO_voidReadPinValue+0x112>
 			*ptr_u8value=GET_BIT(PIND_REG,copy_u8PinId);
    1aa2:	e0 e3       	ldi	r30, 0x30	; 48
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	28 2f       	mov	r18, r24
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	8a 81       	ldd	r24, Y+2	; 0x02
    1aae:	88 2f       	mov	r24, r24
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	a9 01       	movw	r20, r18
    1ab4:	02 c0       	rjmp	.+4      	; 0x1aba <MDIO_voidReadPinValue+0x104>
    1ab6:	55 95       	asr	r21
    1ab8:	47 95       	ror	r20
    1aba:	8a 95       	dec	r24
    1abc:	e2 f7       	brpl	.-8      	; 0x1ab6 <MDIO_voidReadPinValue+0x100>
    1abe:	ca 01       	movw	r24, r20
    1ac0:	81 70       	andi	r24, 0x01	; 1
    1ac2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ac4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ac6:	80 83       	st	Z, r24
 		/*INVALID PORT ID*/
 		break;
 	}


 }
    1ac8:	26 96       	adiw	r28, 0x06	; 6
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	f8 94       	cli
    1ace:	de bf       	out	0x3e, r29	; 62
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	cd bf       	out	0x3d, r28	; 61
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	08 95       	ret

00001ada <blinkYellowLED>:
#include "../LED_Driver/LED_interface.h"
#include "../LED_Driver/LED_config.h"
#include"Traffic_interface.h"

Traffic_Error blinkYellowLED(void)
{
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	0f 92       	push	r0
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
	u8 blink=0;
    1ae4:	19 82       	std	Y+1, r1	; 0x01
	for(blink=0;blink<5*2;blink++)
    1ae6:	19 82       	std	Y+1, r1	; 0x01
    1ae8:	05 c0       	rjmp	.+10     	; 0x1af4 <blinkYellowLED+0x1a>
	{
		HLED_voidBlinkYellow();
    1aea:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <HLED_voidBlinkYellow>
#include"Traffic_interface.h"

Traffic_Error blinkYellowLED(void)
{
	u8 blink=0;
	for(blink=0;blink<5*2;blink++)
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	8f 5f       	subi	r24, 0xFF	; 255
    1af2:	89 83       	std	Y+1, r24	; 0x01
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
    1af6:	8a 30       	cpi	r24, 0x0A	; 10
    1af8:	c0 f3       	brcs	.-16     	; 0x1aea <blinkYellowLED+0x10>
	{
		HLED_voidBlinkYellow();

	}
	return success;
    1afa:	80 e0       	ldi	r24, 0x00	; 0
}
    1afc:	0f 90       	pop	r0
    1afe:	cf 91       	pop	r28
    1b00:	df 91       	pop	r29
    1b02:	08 95       	ret

00001b04 <HTrafficLightMove>:
Traffic_Error HTrafficLightMove(void)
{
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
	 HLED_voidTurnOn(LED_PORT1,LED1_PIN);
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <HLED_voidTurnOn>
	 HLED_voidTurnOn(LED_PORT2,LED3_PIN);
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	62 e0       	ldi	r22, 0x02	; 2
    1b18:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <HLED_voidTurnOn>
	 MTIMER0_voidStart();
    1b1c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <MTIMER0_voidStart>
	 MTIMER0_voidGetTimer(5);
    1b20:	85 e0       	ldi	r24, 0x05	; 5
    1b22:	0e 94 d4 06 	call	0xda8	; 0xda8 <MTIMER0_voidGetTimer>
	 MTIMER0_voidStop();
    1b26:	0e 94 85 07 	call	0xf0a	; 0xf0a <MTIMER0_voidStop>
	 HLED_voidTurnOff(LED_PORT1,LED1_PIN);
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	60 e0       	ldi	r22, 0x00	; 0
    1b2e:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HLED_voidTurnOff>
	 HLED_voidTurnOff(LED_PORT2,LED3_PIN);
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	62 e0       	ldi	r22, 0x02	; 2
    1b36:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HLED_voidTurnOff>

    return success;
    1b3a:	80 e0       	ldi	r24, 0x00	; 0
}
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	08 95       	ret

00001b42 <HTrafficLightStop>:


Traffic_Error HTrafficLightStop(void)
{
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
	 HLED_voidTurnOn(LED_PORT1,LED3_PIN);
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	62 e0       	ldi	r22, 0x02	; 2
    1b4e:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <HLED_voidTurnOn>
	 HLED_voidTurnOn(LED_PORT2,LED1_PIN);
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <HLED_voidTurnOn>
	 MTIMER0_voidStart();
    1b5a:	0e 94 bf 06 	call	0xd7e	; 0xd7e <MTIMER0_voidStart>
	 MTIMER0_voidGetTimer(5);
    1b5e:	85 e0       	ldi	r24, 0x05	; 5
    1b60:	0e 94 d4 06 	call	0xda8	; 0xda8 <MTIMER0_voidGetTimer>
	 MTIMER0_voidStop();
    1b64:	0e 94 85 07 	call	0xf0a	; 0xf0a <MTIMER0_voidStop>
	 HLED_voidTurnOff(LED_PORT1,LED3_PIN);
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	62 e0       	ldi	r22, 0x02	; 2
    1b6c:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HLED_voidTurnOff>
	 HLED_voidTurnOff(LED_PORT2,LED1_PIN);
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	60 e0       	ldi	r22, 0x00	; 0
    1b74:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HLED_voidTurnOff>



	   return success;
    1b78:	80 e0       	ldi	r24, 0x00	; 0
}
    1b7a:	cf 91       	pop	r28
    1b7c:	df 91       	pop	r29
    1b7e:	08 95       	ret

00001b80 <HTrafficLightPressedButton>:

Traffic_Error HTrafficLightPressedButton(void)
{
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
	/*check the condition(pedestrian must wait until the Green LED is on) (USER STORY ONE)*/
	/*Blinking transfer to green in pedestrian*/
	else if((GET_BIT(LED_PORT1,LED1_PIN) == LOW) && ((GET_BIT(LED_PORT2,LED3_PIN) ==LOW)))
	{

		 HLED_voidTurnOn(LED_PORT2,LED3_PIN);
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	62 e0       	ldi	r22, 0x02	; 2
    1b8c:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <HLED_voidTurnOn>
		 blinkYellowLED();
    1b90:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <blinkYellowLED>
		 /*Red and Green ON*/
		 HTrafficLightStop();
    1b94:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <HTrafficLightStop>
		   return success;
    1b98:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return fail;
	}
}
    1b9a:	cf 91       	pop	r28
    1b9c:	df 91       	pop	r29
    1b9e:	08 95       	ret

00001ba0 <HLED_voidInitialize>:
#include"LED_interface.h"



void HLED_voidInitialize(u8 copy_u8PortId,u8 copy_u8PIN)
{
    1ba0:	df 93       	push	r29
    1ba2:	cf 93       	push	r28
    1ba4:	00 d0       	rcall	.+0      	; 0x1ba6 <HLED_voidInitialize+0x6>
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
    1baa:	89 83       	std	Y+1, r24	; 0x01
    1bac:	6a 83       	std	Y+2, r22	; 0x02
	 MDIO_voidInitPinDirection(copy_u8PortId,copy_u8PIN,OUTPUT);
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
    1bb0:	6a 81       	ldd	r22, Y+2	; 0x02
    1bb2:	41 e0       	ldi	r20, 0x01	; 1
    1bb4:	0e 94 35 0a 	call	0x146a	; 0x146a <MDIO_voidInitPinDirection>
}
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	cf 91       	pop	r28
    1bbe:	df 91       	pop	r29
    1bc0:	08 95       	ret

00001bc2 <HLED_voidTurnOn>:

void HLED_voidTurnOn(u8 copy_u8PortId,u8 copy_u8PIN)
{
    1bc2:	df 93       	push	r29
    1bc4:	cf 93       	push	r28
    1bc6:	00 d0       	rcall	.+0      	; 0x1bc8 <HLED_voidTurnOn+0x6>
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
    1bcc:	89 83       	std	Y+1, r24	; 0x01
    1bce:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidWritePinValue(copy_u8PortId,copy_u8PIN, HIGH);
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	6a 81       	ldd	r22, Y+2	; 0x02
    1bd4:	41 e0       	ldi	r20, 0x01	; 1
    1bd6:	0e 94 42 0b 	call	0x1684	; 0x1684 <MDIO_voidWritePinValue>
}
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <HLED_voidTurnOff>:


void HLED_voidTurnOff(u8 copy_u8PortId,u8 copy_u8PIN)
{
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	00 d0       	rcall	.+0      	; 0x1bea <HLED_voidTurnOff+0x6>
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
    1bee:	89 83       	std	Y+1, r24	; 0x01
    1bf0:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidWritePinValue(copy_u8PortId,copy_u8PIN, LOW);
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	6a 81       	ldd	r22, Y+2	; 0x02
    1bf6:	40 e0       	ldi	r20, 0x00	; 0
    1bf8:	0e 94 42 0b 	call	0x1684	; 0x1684 <MDIO_voidWritePinValue>
}
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	cf 91       	pop	r28
    1c02:	df 91       	pop	r29
    1c04:	08 95       	ret

00001c06 <HLED_voidToggle>:

void HLED_voidToggle(u8 copy_u8PortId,u8 copy_u8PinId)
{
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	00 d0       	rcall	.+0      	; 0x1c0c <HLED_voidToggle+0x6>
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
    1c10:	89 83       	std	Y+1, r24	; 0x01
    1c12:	6a 83       	std	Y+2, r22	; 0x02

	MDIO_voidTogglePinValue(copy_u8PortId,copy_u8PinId);
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
    1c16:	6a 81       	ldd	r22, Y+2	; 0x02
    1c18:	0e 94 4f 0c 	call	0x189e	; 0x189e <MDIO_voidTogglePinValue>

}
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	cf 91       	pop	r28
    1c22:	df 91       	pop	r29
    1c24:	08 95       	ret

00001c26 <HLED_voidBlinkYellow>:
void HLED_voidBlinkYellow(void)
{
    1c26:	df 93       	push	r29
    1c28:	cf 93       	push	r28
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
	MTIMER0_voidStart();
    1c2e:	0e 94 bf 06 	call	0xd7e	; 0xd7e <MTIMER0_voidStart>
	MDIO_voidTogglePinValue(LED_PORT1,LED2_PIN);
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	61 e0       	ldi	r22, 0x01	; 1
    1c36:	0e 94 4f 0c 	call	0x189e	; 0x189e <MDIO_voidTogglePinValue>
	MDIO_voidTogglePinValue(LED_PORT2,LED2_PIN);
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	61 e0       	ldi	r22, 0x01	; 1
    1c3e:	0e 94 4f 0c 	call	0x189e	; 0x189e <MDIO_voidTogglePinValue>
	MTIMER0_voidGetTimer(1);
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	0e 94 d4 06 	call	0xda8	; 0xda8 <MTIMER0_voidGetTimer>
	MTIMER0_voidStop();
    1c48:	0e 94 85 07 	call	0xf0a	; 0xf0a <MTIMER0_voidStop>
}
    1c4c:	cf 91       	pop	r28
    1c4e:	df 91       	pop	r29
    1c50:	08 95       	ret

00001c52 <HButton_voidInit>:
#include"../../STD_TYPES.h"
#include"../../BIT_MATH.h"
#include "Button_interface.h"

void HButton_voidInit(u8 copy_u8PortId, u8 copy_u8PIN)
{
    1c52:	df 93       	push	r29
    1c54:	cf 93       	push	r28
    1c56:	00 d0       	rcall	.+0      	; 0x1c58 <HButton_voidInit+0x6>
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	89 83       	std	Y+1, r24	; 0x01
    1c5e:	6a 83       	std	Y+2, r22	; 0x02
	 MDIO_voidInitPinDirection(copy_u8PortId,copy_u8PIN,INPUT);
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
    1c62:	6a 81       	ldd	r22, Y+2	; 0x02
    1c64:	40 e0       	ldi	r20, 0x00	; 0
    1c66:	0e 94 35 0a 	call	0x146a	; 0x146a <MDIO_voidInitPinDirection>
}
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	cf 91       	pop	r28
    1c70:	df 91       	pop	r29
    1c72:	08 95       	ret

00001c74 <HButton_voidRead>:

void HButton_voidRead(u8 copy_u8PortId, u8 copy_u8PIN, u8 *ptr_u8StateButton)
{
    1c74:	df 93       	push	r29
    1c76:	cf 93       	push	r28
    1c78:	00 d0       	rcall	.+0      	; 0x1c7a <HButton_voidRead+0x6>
    1c7a:	00 d0       	rcall	.+0      	; 0x1c7c <HButton_voidRead+0x8>
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	89 83       	std	Y+1, r24	; 0x01
    1c82:	6a 83       	std	Y+2, r22	; 0x02
    1c84:	5c 83       	std	Y+4, r21	; 0x04
    1c86:	4b 83       	std	Y+3, r20	; 0x03
	 MDIO_voidReadPinValue(copy_u8PortId,copy_u8PIN,ptr_u8StateButton);
    1c88:	2b 81       	ldd	r18, Y+3	; 0x03
    1c8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	6a 81       	ldd	r22, Y+2	; 0x02
    1c90:	a9 01       	movw	r20, r18
    1c92:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <MDIO_voidReadPinValue>

}
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	cf 91       	pop	r28
    1ca0:	df 91       	pop	r29
    1ca2:	08 95       	ret

00001ca4 <main>:

/*for compiler optimization*/
  u8 pedestrian=0;
  u8 LED = LED_Green;
int main(void)
{
    1ca4:	df 93       	push	r29
    1ca6:	cf 93       	push	r28
    1ca8:	cd b7       	in	r28, 0x3d	; 61
    1caa:	de b7       	in	r29, 0x3e	; 62

    /*Initialize Timer*/
    MTIMER0_voidInitialize();
    1cac:	0e 94 9c 06 	call	0xd38	; 0xd38 <MTIMER0_voidInitialize>

    /*Initialize LEDS for cars */
	HLED_voidInitialize(LED_PORT1,LED1_PIN);
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	60 e0       	ldi	r22, 0x00	; 0
    1cb4:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <HLED_voidInitialize>
	HLED_voidInitialize(LED_PORT1,LED2_PIN);
    1cb8:	80 e0       	ldi	r24, 0x00	; 0
    1cba:	61 e0       	ldi	r22, 0x01	; 1
    1cbc:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <HLED_voidInitialize>
	HLED_voidInitialize(LED_PORT1,LED3_PIN);
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	62 e0       	ldi	r22, 0x02	; 2
    1cc4:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <HLED_voidInitialize>

    /*Initialize  Port LEDS for pedestrians */
     MDIO_voidSetPortDirection(PORTB,OUTPUT);
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	61 e0       	ldi	r22, 0x01	; 1
    1ccc:	0e 94 4f 09 	call	0x129e	; 0x129e <MDIO_voidSetPortDirection>
     //MDIO_voidInitPinDirection(PORTA,PIN3,OUTPUT);

	/*Initialize Button*/
	HButton_voidInit(ButtonPort, ButtonPIN);
    1cd0:	83 e0       	ldi	r24, 0x03	; 3
    1cd2:	62 e0       	ldi	r22, 0x02	; 2
    1cd4:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <HButton_voidInit>
	MDIO_voidWritePinValue(ButtonPort,ButtonPIN,HIGH);
    1cd8:	83 e0       	ldi	r24, 0x03	; 3
    1cda:	62 e0       	ldi	r22, 0x02	; 2
    1cdc:	41 e0       	ldi	r20, 0x01	; 1
    1cde:	0e 94 42 0b 	call	0x1684	; 0x1684 <MDIO_voidWritePinValue>

	/*enable PIE (EXTI0)*/
	MEXTI_voidEXTINT_Enable(EXIT_INF0);
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	0e 94 b9 08 	call	0x1172	; 0x1172 <MEXTI_voidEXTINT_Enable>
	MEXTI_voidEXTINT_SenseControl(EXIT_ANY_FALLING_EDGE_MODE, EXIT_INF0);
    1ce8:	83 e0       	ldi	r24, 0x03	; 3
    1cea:	60 e0       	ldi	r22, 0x00	; 0
    1cec:	0e 94 a1 07 	call	0xf42	; 0xf42 <MEXTI_voidEXTINT_SenseControl>

	/*enable general interrupt  GIE*/
	MGIE_voidGIEEnable();
    1cf0:	0e 94 33 09 	call	0x1266	; 0x1266 <MGIE_voidGIEEnable>

	 while(1)
	 {

		    LED = LED_Green;
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	80 93 68 01 	sts	0x0168, r24
			HTrafficLightMove();
    1cfa:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <HTrafficLightMove>
			LED = LED_1stYellow;
    1cfe:	82 e0       	ldi	r24, 0x02	; 2
    1d00:	80 93 68 01 	sts	0x0168, r24
			blinkYellowLED();
    1d04:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <blinkYellowLED>
			LED = LED_Red;
    1d08:	83 e0       	ldi	r24, 0x03	; 3
    1d0a:	80 93 68 01 	sts	0x0168, r24
			HTrafficLightStop();
    1d0e:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <HTrafficLightStop>
			LED = LED_2stYellow;
    1d12:	84 e0       	ldi	r24, 0x04	; 4
    1d14:	80 93 68 01 	sts	0x0168, r24
			blinkYellowLED();
    1d18:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <blinkYellowLED>
    1d1c:	eb cf       	rjmp	.-42     	; 0x1cf4 <main+0x50>

00001d1e <NormalModevoid>:

    }
}

void NormalModevoid(void)
{
    1d1e:	df 93       	push	r29
    1d20:	cf 93       	push	r28
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
	HTrafficLightMove();
    1d26:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <HTrafficLightMove>
	blinkYellowLED();
    1d2a:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <blinkYellowLED>
	HTrafficLightStop();
    1d2e:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <HTrafficLightStop>
	blinkYellowLED();
    1d32:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <blinkYellowLED>
}
    1d36:	cf 91       	pop	r28
    1d38:	df 91       	pop	r29
    1d3a:	08 95       	ret

00001d3c <pedestrianModevoid>:
void pedestrianModevoid(void)
{
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	00 d0       	rcall	.+0      	; 0x1d42 <pedestrianModevoid+0x6>
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
	 switch(LED)
    1d46:	80 91 68 01 	lds	r24, 0x0168
    1d4a:	28 2f       	mov	r18, r24
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	3a 83       	std	Y+2, r19	; 0x02
    1d50:	29 83       	std	Y+1, r18	; 0x01
    1d52:	89 81       	ldd	r24, Y+1	; 0x01
    1d54:	9a 81       	ldd	r25, Y+2	; 0x02
    1d56:	82 30       	cpi	r24, 0x02	; 2
    1d58:	91 05       	cpc	r25, r1
    1d5a:	39 f1       	breq	.+78     	; 0x1daa <pedestrianModevoid+0x6e>
    1d5c:	29 81       	ldd	r18, Y+1	; 0x01
    1d5e:	3a 81       	ldd	r19, Y+2	; 0x02
    1d60:	23 30       	cpi	r18, 0x03	; 3
    1d62:	31 05       	cpc	r19, r1
    1d64:	34 f4       	brge	.+12     	; 0x1d72 <pedestrianModevoid+0x36>
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6a:	81 30       	cpi	r24, 0x01	; 1
    1d6c:	91 05       	cpc	r25, r1
    1d6e:	61 f0       	breq	.+24     	; 0x1d88 <pedestrianModevoid+0x4c>
    1d70:	2d c0       	rjmp	.+90     	; 0x1dcc <pedestrianModevoid+0x90>
    1d72:	29 81       	ldd	r18, Y+1	; 0x01
    1d74:	3a 81       	ldd	r19, Y+2	; 0x02
    1d76:	23 30       	cpi	r18, 0x03	; 3
    1d78:	31 05       	cpc	r19, r1
    1d7a:	e1 f0       	breq	.+56     	; 0x1db4 <pedestrianModevoid+0x78>
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01
    1d7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d80:	84 30       	cpi	r24, 0x04	; 4
    1d82:	91 05       	cpc	r25, r1
    1d84:	e9 f0       	breq	.+58     	; 0x1dc0 <pedestrianModevoid+0x84>
    1d86:	22 c0       	rjmp	.+68     	; 0x1dcc <pedestrianModevoid+0x90>
	 {
	 case LED_Green:
		 HLED_voidTurnOn(LED_PORT2,LED3_PIN);
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	62 e0       	ldi	r22, 0x02	; 2
    1d8c:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <HLED_voidTurnOn>
		 blinkYellowLED();
    1d90:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <blinkYellowLED>
		 HLED_voidTurnOff(LED_PORT1,LED1_PIN);
    1d94:	80 e0       	ldi	r24, 0x00	; 0
    1d96:	60 e0       	ldi	r22, 0x00	; 0
    1d98:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HLED_voidTurnOff>
		 HLED_voidTurnOff(LED_PORT2,LED3_PIN);
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	62 e0       	ldi	r22, 0x02	; 2
    1da0:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HLED_voidTurnOff>
		 HTrafficLightStop();
    1da4:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <HTrafficLightStop>
    1da8:	11 c0       	rjmp	.+34     	; 0x1dcc <pedestrianModevoid+0x90>
		 break;
	 case LED_1stYellow:
		 blinkYellowLED();
    1daa:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <blinkYellowLED>
		 HTrafficLightStop();
    1dae:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <HTrafficLightStop>
    1db2:	0c c0       	rjmp	.+24     	; 0x1dcc <pedestrianModevoid+0x90>
		 break;
	 case LED_Red:
		 HTrafficLightStop();
    1db4:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <HTrafficLightStop>
		 LED=LED_2stYellow;
    1db8:	84 e0       	ldi	r24, 0x04	; 4
    1dba:	80 93 68 01 	sts	0x0168, r24
    1dbe:	06 c0       	rjmp	.+12     	; 0x1dcc <pedestrianModevoid+0x90>
		 break;
	 case LED_2stYellow:
		 blinkYellowLED();
    1dc0:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <blinkYellowLED>
		 HTrafficLightStop();
    1dc4:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <HTrafficLightStop>
		 NormalModevoid();
    1dc8:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <NormalModevoid>
		 break;
	 default:
		 //error
		 break;
	 }
}
    1dcc:	0f 90       	pop	r0
    1dce:	0f 90       	pop	r0
    1dd0:	cf 91       	pop	r28
    1dd2:	df 91       	pop	r29
    1dd4:	08 95       	ret

00001dd6 <__vector_1>:



void __vector_1(void)  __attribute__((signal,used));
void __vector_1(void)
{
    1dd6:	1f 92       	push	r1
    1dd8:	0f 92       	push	r0
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	0f 92       	push	r0
    1dde:	11 24       	eor	r1, r1
    1de0:	2f 93       	push	r18
    1de2:	3f 93       	push	r19
    1de4:	4f 93       	push	r20
    1de6:	5f 93       	push	r21
    1de8:	6f 93       	push	r22
    1dea:	7f 93       	push	r23
    1dec:	8f 93       	push	r24
    1dee:	9f 93       	push	r25
    1df0:	af 93       	push	r26
    1df2:	bf 93       	push	r27
    1df4:	ef 93       	push	r30
    1df6:	ff 93       	push	r31
    1df8:	df 93       	push	r29
    1dfa:	cf 93       	push	r28
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
	pedestrianModevoid();
    1e00:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <pedestrianModevoid>

}
    1e04:	cf 91       	pop	r28
    1e06:	df 91       	pop	r29
    1e08:	ff 91       	pop	r31
    1e0a:	ef 91       	pop	r30
    1e0c:	bf 91       	pop	r27
    1e0e:	af 91       	pop	r26
    1e10:	9f 91       	pop	r25
    1e12:	8f 91       	pop	r24
    1e14:	7f 91       	pop	r23
    1e16:	6f 91       	pop	r22
    1e18:	5f 91       	pop	r21
    1e1a:	4f 91       	pop	r20
    1e1c:	3f 91       	pop	r19
    1e1e:	2f 91       	pop	r18
    1e20:	0f 90       	pop	r0
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	0f 90       	pop	r0
    1e26:	1f 90       	pop	r1
    1e28:	18 95       	reti

00001e2a <__udivmodhi4>:
    1e2a:	aa 1b       	sub	r26, r26
    1e2c:	bb 1b       	sub	r27, r27
    1e2e:	51 e1       	ldi	r21, 0x11	; 17
    1e30:	07 c0       	rjmp	.+14     	; 0x1e40 <__udivmodhi4_ep>

00001e32 <__udivmodhi4_loop>:
    1e32:	aa 1f       	adc	r26, r26
    1e34:	bb 1f       	adc	r27, r27
    1e36:	a6 17       	cp	r26, r22
    1e38:	b7 07       	cpc	r27, r23
    1e3a:	10 f0       	brcs	.+4      	; 0x1e40 <__udivmodhi4_ep>
    1e3c:	a6 1b       	sub	r26, r22
    1e3e:	b7 0b       	sbc	r27, r23

00001e40 <__udivmodhi4_ep>:
    1e40:	88 1f       	adc	r24, r24
    1e42:	99 1f       	adc	r25, r25
    1e44:	5a 95       	dec	r21
    1e46:	a9 f7       	brne	.-22     	; 0x1e32 <__udivmodhi4_loop>
    1e48:	80 95       	com	r24
    1e4a:	90 95       	com	r25
    1e4c:	bc 01       	movw	r22, r24
    1e4e:	cd 01       	movw	r24, r26
    1e50:	08 95       	ret

00001e52 <__prologue_saves__>:
    1e52:	2f 92       	push	r2
    1e54:	3f 92       	push	r3
    1e56:	4f 92       	push	r4
    1e58:	5f 92       	push	r5
    1e5a:	6f 92       	push	r6
    1e5c:	7f 92       	push	r7
    1e5e:	8f 92       	push	r8
    1e60:	9f 92       	push	r9
    1e62:	af 92       	push	r10
    1e64:	bf 92       	push	r11
    1e66:	cf 92       	push	r12
    1e68:	df 92       	push	r13
    1e6a:	ef 92       	push	r14
    1e6c:	ff 92       	push	r15
    1e6e:	0f 93       	push	r16
    1e70:	1f 93       	push	r17
    1e72:	cf 93       	push	r28
    1e74:	df 93       	push	r29
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	ca 1b       	sub	r28, r26
    1e7c:	db 0b       	sbc	r29, r27
    1e7e:	0f b6       	in	r0, 0x3f	; 63
    1e80:	f8 94       	cli
    1e82:	de bf       	out	0x3e, r29	; 62
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	cd bf       	out	0x3d, r28	; 61
    1e88:	09 94       	ijmp

00001e8a <__epilogue_restores__>:
    1e8a:	2a 88       	ldd	r2, Y+18	; 0x12
    1e8c:	39 88       	ldd	r3, Y+17	; 0x11
    1e8e:	48 88       	ldd	r4, Y+16	; 0x10
    1e90:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e92:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e94:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e96:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e98:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e9a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e9c:	b9 84       	ldd	r11, Y+9	; 0x09
    1e9e:	c8 84       	ldd	r12, Y+8	; 0x08
    1ea0:	df 80       	ldd	r13, Y+7	; 0x07
    1ea2:	ee 80       	ldd	r14, Y+6	; 0x06
    1ea4:	fd 80       	ldd	r15, Y+5	; 0x05
    1ea6:	0c 81       	ldd	r16, Y+4	; 0x04
    1ea8:	1b 81       	ldd	r17, Y+3	; 0x03
    1eaa:	aa 81       	ldd	r26, Y+2	; 0x02
    1eac:	b9 81       	ldd	r27, Y+1	; 0x01
    1eae:	ce 0f       	add	r28, r30
    1eb0:	d1 1d       	adc	r29, r1
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	f8 94       	cli
    1eb6:	de bf       	out	0x3e, r29	; 62
    1eb8:	0f be       	out	0x3f, r0	; 63
    1eba:	cd bf       	out	0x3d, r28	; 61
    1ebc:	ed 01       	movw	r28, r26
    1ebe:	08 95       	ret

00001ec0 <ceil>:
    1ec0:	3b d0       	rcall	.+118    	; 0x1f38 <__fp_trunc>
    1ec2:	80 f0       	brcs	.+32     	; 0x1ee4 <ceil+0x24>
    1ec4:	9f 37       	cpi	r25, 0x7F	; 127
    1ec6:	40 f4       	brcc	.+16     	; 0x1ed8 <ceil+0x18>
    1ec8:	91 11       	cpse	r25, r1
    1eca:	0e f4       	brtc	.+2      	; 0x1ece <ceil+0xe>
    1ecc:	4d c0       	rjmp	.+154    	; 0x1f68 <__fp_szero>
    1ece:	60 e0       	ldi	r22, 0x00	; 0
    1ed0:	70 e0       	ldi	r23, 0x00	; 0
    1ed2:	80 e8       	ldi	r24, 0x80	; 128
    1ed4:	9f e3       	ldi	r25, 0x3F	; 63
    1ed6:	08 95       	ret
    1ed8:	26 f0       	brts	.+8      	; 0x1ee2 <ceil+0x22>
    1eda:	1b 16       	cp	r1, r27
    1edc:	61 1d       	adc	r22, r1
    1ede:	71 1d       	adc	r23, r1
    1ee0:	81 1d       	adc	r24, r1
    1ee2:	01 c0       	rjmp	.+2      	; 0x1ee6 <__fp_mintl>
    1ee4:	1b c0       	rjmp	.+54     	; 0x1f1c <__fp_mpack>

00001ee6 <__fp_mintl>:
    1ee6:	88 23       	and	r24, r24
    1ee8:	71 f4       	brne	.+28     	; 0x1f06 <__fp_mintl+0x20>
    1eea:	77 23       	and	r23, r23
    1eec:	21 f0       	breq	.+8      	; 0x1ef6 <__fp_mintl+0x10>
    1eee:	98 50       	subi	r25, 0x08	; 8
    1ef0:	87 2b       	or	r24, r23
    1ef2:	76 2f       	mov	r23, r22
    1ef4:	07 c0       	rjmp	.+14     	; 0x1f04 <__fp_mintl+0x1e>
    1ef6:	66 23       	and	r22, r22
    1ef8:	11 f4       	brne	.+4      	; 0x1efe <__fp_mintl+0x18>
    1efa:	99 27       	eor	r25, r25
    1efc:	0d c0       	rjmp	.+26     	; 0x1f18 <__fp_mintl+0x32>
    1efe:	90 51       	subi	r25, 0x10	; 16
    1f00:	86 2b       	or	r24, r22
    1f02:	70 e0       	ldi	r23, 0x00	; 0
    1f04:	60 e0       	ldi	r22, 0x00	; 0
    1f06:	2a f0       	brmi	.+10     	; 0x1f12 <__fp_mintl+0x2c>
    1f08:	9a 95       	dec	r25
    1f0a:	66 0f       	add	r22, r22
    1f0c:	77 1f       	adc	r23, r23
    1f0e:	88 1f       	adc	r24, r24
    1f10:	da f7       	brpl	.-10     	; 0x1f08 <__fp_mintl+0x22>
    1f12:	88 0f       	add	r24, r24
    1f14:	96 95       	lsr	r25
    1f16:	87 95       	ror	r24
    1f18:	97 f9       	bld	r25, 7
    1f1a:	08 95       	ret

00001f1c <__fp_mpack>:
    1f1c:	9f 3f       	cpi	r25, 0xFF	; 255
    1f1e:	31 f0       	breq	.+12     	; 0x1f2c <__fp_mpack_finite+0xc>

00001f20 <__fp_mpack_finite>:
    1f20:	91 50       	subi	r25, 0x01	; 1
    1f22:	20 f4       	brcc	.+8      	; 0x1f2c <__fp_mpack_finite+0xc>
    1f24:	87 95       	ror	r24
    1f26:	77 95       	ror	r23
    1f28:	67 95       	ror	r22
    1f2a:	b7 95       	ror	r27
    1f2c:	88 0f       	add	r24, r24
    1f2e:	91 1d       	adc	r25, r1
    1f30:	96 95       	lsr	r25
    1f32:	87 95       	ror	r24
    1f34:	97 f9       	bld	r25, 7
    1f36:	08 95       	ret

00001f38 <__fp_trunc>:
    1f38:	25 d0       	rcall	.+74     	; 0x1f84 <__fp_splitA>
    1f3a:	a0 f0       	brcs	.+40     	; 0x1f64 <__fp_trunc+0x2c>
    1f3c:	be e7       	ldi	r27, 0x7E	; 126
    1f3e:	b9 17       	cp	r27, r25
    1f40:	88 f4       	brcc	.+34     	; 0x1f64 <__fp_trunc+0x2c>
    1f42:	bb 27       	eor	r27, r27
    1f44:	9f 38       	cpi	r25, 0x8F	; 143
    1f46:	60 f4       	brcc	.+24     	; 0x1f60 <__fp_trunc+0x28>
    1f48:	16 16       	cp	r1, r22
    1f4a:	b1 1d       	adc	r27, r1
    1f4c:	67 2f       	mov	r22, r23
    1f4e:	78 2f       	mov	r23, r24
    1f50:	88 27       	eor	r24, r24
    1f52:	98 5f       	subi	r25, 0xF8	; 248
    1f54:	f7 cf       	rjmp	.-18     	; 0x1f44 <__fp_trunc+0xc>
    1f56:	86 95       	lsr	r24
    1f58:	77 95       	ror	r23
    1f5a:	67 95       	ror	r22
    1f5c:	b1 1d       	adc	r27, r1
    1f5e:	93 95       	inc	r25
    1f60:	96 39       	cpi	r25, 0x96	; 150
    1f62:	c8 f3       	brcs	.-14     	; 0x1f56 <__fp_trunc+0x1e>
    1f64:	08 95       	ret

00001f66 <__fp_zero>:
    1f66:	e8 94       	clt

00001f68 <__fp_szero>:
    1f68:	bb 27       	eor	r27, r27
    1f6a:	66 27       	eor	r22, r22
    1f6c:	77 27       	eor	r23, r23
    1f6e:	cb 01       	movw	r24, r22
    1f70:	97 f9       	bld	r25, 7
    1f72:	08 95       	ret

00001f74 <__fp_split3>:
    1f74:	57 fd       	sbrc	r21, 7
    1f76:	90 58       	subi	r25, 0x80	; 128
    1f78:	44 0f       	add	r20, r20
    1f7a:	55 1f       	adc	r21, r21
    1f7c:	59 f0       	breq	.+22     	; 0x1f94 <__fp_splitA+0x10>
    1f7e:	5f 3f       	cpi	r21, 0xFF	; 255
    1f80:	71 f0       	breq	.+28     	; 0x1f9e <__fp_splitA+0x1a>
    1f82:	47 95       	ror	r20

00001f84 <__fp_splitA>:
    1f84:	88 0f       	add	r24, r24
    1f86:	97 fb       	bst	r25, 7
    1f88:	99 1f       	adc	r25, r25
    1f8a:	61 f0       	breq	.+24     	; 0x1fa4 <__fp_splitA+0x20>
    1f8c:	9f 3f       	cpi	r25, 0xFF	; 255
    1f8e:	79 f0       	breq	.+30     	; 0x1fae <__fp_splitA+0x2a>
    1f90:	87 95       	ror	r24
    1f92:	08 95       	ret
    1f94:	12 16       	cp	r1, r18
    1f96:	13 06       	cpc	r1, r19
    1f98:	14 06       	cpc	r1, r20
    1f9a:	55 1f       	adc	r21, r21
    1f9c:	f2 cf       	rjmp	.-28     	; 0x1f82 <__fp_split3+0xe>
    1f9e:	46 95       	lsr	r20
    1fa0:	f1 df       	rcall	.-30     	; 0x1f84 <__fp_splitA>
    1fa2:	08 c0       	rjmp	.+16     	; 0x1fb4 <__fp_splitA+0x30>
    1fa4:	16 16       	cp	r1, r22
    1fa6:	17 06       	cpc	r1, r23
    1fa8:	18 06       	cpc	r1, r24
    1faa:	99 1f       	adc	r25, r25
    1fac:	f1 cf       	rjmp	.-30     	; 0x1f90 <__fp_splitA+0xc>
    1fae:	86 95       	lsr	r24
    1fb0:	71 05       	cpc	r23, r1
    1fb2:	61 05       	cpc	r22, r1
    1fb4:	08 94       	sec
    1fb6:	08 95       	ret

00001fb8 <_exit>:
    1fb8:	f8 94       	cli

00001fba <__stop_program>:
    1fba:	ff cf       	rjmp	.-2      	; 0x1fba <__stop_program>
